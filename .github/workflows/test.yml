name: test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTFILES_DIR: ${{ github.workspace }}
  CI_MODE: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  unit-tests:
    name: unit tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        # keep-sorted start
        os: [macos-14, macos-latest, ubuntu-latest]
        # keep-sorted end

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-${{ matrix.os }}-test-${{ hashFiles('src/neovim/config/plugins.lua') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-test-

      - name: setup environment
        run: |
          echo "TEST_TMP_DIR=/tmp/dotfiles-test" >> $GITHUB_ENV
          mkdir -p "/tmp/dotfiles-test"

          # Install dependencies based on OS
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Install required tools
            brew install bash coreutils findutils gnu-sed neovim shellcheck
            # Handle both Intel (/usr/local) and ARM64 (/opt/homebrew) paths
            if [[ -d "/opt/homebrew" ]]; then
              echo "/opt/homebrew/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
              echo "/opt/homebrew/opt/findutils/libexec/gnubin" >> $GITHUB_PATH
            else
              echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
              echo "/usr/local/opt/findutils/libexec/gnubin" >> $GITHUB_PATH
            fi
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -qq
            sudo apt-get install -y bash coreutils findutils sed neovim shellcheck zsh tmux git
          fi

      - name: setup neovim
        run: |
          mkdir -p ~/.config/nvim ~/.local/share/nvim ~/.local/state/nvim
          ln -sf "${{ github.workspace }}/src/neovim/init.lua" ~/.config/nvim/init.lua
          ln -sf "${{ github.workspace }}/src/neovim/config" ~/.config/nvim/config

          # Install lazy.nvim only if not cached
          if [[ ! -d ~/.local/share/nvim/lazy/lazy.nvim ]]; then
            git clone --filter=blob:none --single-branch \
              https://github.com/folke/lazy.nvim.git \
              ~/.local/share/nvim/lazy/lazy.nvim
          fi

      - name: run unit tests
        run: |
          chmod +x test/runner.zsh
          cd test && ./runner.zsh --unit

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.os }}
          path: |
            test/test-results.xml
            test/*.log
          retention-days: 7

  functional-tests:
    name: functional tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: unit-tests

    strategy:
      fail-fast: false
      matrix:
        # keep-sorted start
        os: [macos-14, macos-latest, ubuntu-latest]
        # keep-sorted end

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: setup environment
        run: |
          echo "TEST_TMP_DIR=/tmp/dotfiles-test" >> $GITHUB_ENV
          mkdir -p "/tmp/dotfiles-test"

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Install required tools
            brew install bash coreutils findutils gnu-sed neovim
            # Handle both Intel (/usr/local) and ARM64 (/opt/homebrew) paths
            if [[ -d "/opt/homebrew" ]]; then
              echo "/opt/homebrew/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
              echo "/opt/homebrew/opt/findutils/libexec/gnubin" >> $GITHUB_PATH
            else
              echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
              echo "/usr/local/opt/findutils/libexec/gnubin" >> $GITHUB_PATH
            fi
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -qq
            sudo apt-get install -y bash coreutils findutils sed neovim zsh tmux git
          fi

      - name: setup neovim
        run: |
          mkdir -p ~/.config/nvim ~/.local/share/nvim ~/.local/state/nvim
          ln -sf "${{ github.workspace }}/src/neovim/init.lua" ~/.config/nvim/init.lua
          ln -sf "${{ github.workspace }}/src/neovim/config" ~/.config/nvim/config

          git clone --filter=blob:none --single-branch \
            https://github.com/folke/lazy.nvim.git \
            ~/.local/share/nvim/lazy/lazy.nvim || true

      - name: run functional tests
        run: |
          chmod +x test/runner.zsh
          cd test && ./runner.zsh --functional

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-results-${{ matrix.os }}
          path: |
            test/test-results.xml
            test/*.log
          retention-days: 7

  integration-tests:
    name: integration tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: functional-tests

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: create test environment
        run: |
          export TEST_HOME="/tmp/test-home"
          mkdir -p "$TEST_HOME/.config" "$TEST_HOME/.local/share"
          echo "TEST_HOME=$TEST_HOME" >> $GITHUB_ENV

      - name: test symlink creation
        run: |
          export HOME="$TEST_HOME"
          export DOTFILES_DIR="${{ github.workspace }}"

          # Test symlink creation
          bash src/setup/symlinks.sh

          # Verify critical symlinks
          test -L "$HOME/.zshrc" && echo ".zshrc symlink created" || echo "ERROR: .zshrc symlink missing"
          test -L "$HOME/.gitconfig" && echo ".gitconfig symlink created" || echo "ERROR: .gitconfig symlink missing"
          test -L "$HOME/.tmux.conf" && echo ".tmux.conf symlink created" || echo "ERROR: .tmux.conf symlink missing"

      - name: test theme switcher
        run: |
          mkdir -p ~/.config/{alacritty,tmux,theme-switcher}
          bash src/theme-switcher/switch-theme.sh || echo "WARNING: Theme switcher test failed"
          test -f ~/.config/theme-switcher/current-theme.sh || echo "ERROR: Theme file not created"

      - name: validate configurations
        run: |
          # Validate shell configs
          zsh -n src/zsh/zshrc || echo "WARNING: Zsh config validation failed"

          # Validate git config
          git config --file=src/git/gitconfig --list > /dev/null || echo "WARNING: Git config validation failed"

          # Check for hardcoded paths
          ! grep -r "/Users/[^/]*/\|/home/[^/]*/" src/ || echo "WARNING: Hardcoded paths found"

  test-status:
    name: test status summary
    if: always()
    needs: [unit-tests, functional-tests, integration-tests]
    runs-on: ubuntu-latest

    steps:
      - name: check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Functional Tests: ${{ needs.functional-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"

          if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.functional-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "Tests failed"
            exit 1
          fi

          echo "All tests passed"
