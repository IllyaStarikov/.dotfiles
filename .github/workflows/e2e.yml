name: e2e

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Run in debug mode'
        required: false
        default: false
        type: boolean

env:
  TERM: xterm-256color
  CI: true

jobs:
  e2e-tests:
    name: e2e test - ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: "Arch Linux (Docker)"
            dockerfile: "test/e2e/Dockerfile.arch"
          - os: ubuntu-latest
            name: "Ubuntu 24.04 (Docker)"
            dockerfile: "test/e2e/Dockerfile.ubuntu"
          - os: macos-latest
            name: "macOS (Native)"
            dockerfile: ""

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: set up docker buildx (linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: cache docker layers (linux only)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: install dependencies
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update -qq
            sudo apt-get install -y zsh
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS already has zsh, but install Homebrew packages if needed
            brew install neovim || true
            brew install tmux || true
            brew install ripgrep || true
            brew install fd || true
            brew install coreutils || true  # Provides gtimeout command
          fi

      - name: make scripts executable
        run: |
          chmod +x test/e2e/docker-e2e-test.zsh || true
          chmod +x test/runner.zsh || true
          chmod +x src/setup/setup.sh || true
          chmod +x src/setup/symlinks.sh || true

      - name: run e2e tests (docker)
        if: runner.os == 'Linux'
        run: |
          echo "Running Docker-based E2E tests on ${{ matrix.name }}"
          # Build Docker image from the specified Dockerfile
          docker build -f ${{ matrix.dockerfile }} -t dotfiles-test:latest .
          # Run the test in Docker
          docker run --rm \
            -e CI=true \
            -e E2E_TEST=true \
            -e DEBUG=true \
            -e NONINTERACTIVE=1 \
            dotfiles-test:latest \
            bash -c "/home/testuser/.dotfiles/test/e2e/docker-e2e-test.zsh"

      - name: run e2e tests (native macos)
        if: runner.os == 'macOS'
        run: |
          echo "Running native E2E tests on ${{ matrix.name }}"
          # Run setup script directly on macOS
          ./src/setup/setup.sh --core --skip-brew || echo "Setup completed with warnings"
          # Run tests from the current directory (GitHub workspace)
          # The setup script creates symlinks, not a copy of the repo
          ./test/runner.zsh --quick

      - name: upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            test/logs/e2e_*/
            test/e2e/*.log

      - name: display test summary
        if: always()
        run: |
          # Find the latest log directory
          LOG_DIR=$(ls -td test/logs/e2e_* 2>/dev/null | head -1)

          if [ -d "$LOG_DIR" ]; then
            echo "## Test Summary"
            echo ""

            # Check if test.log exists and show summary
            if [ -f "$LOG_DIR/test.log" ]; then
              echo "### Test Phases:"
              grep -E "^(✓|✗|⚠)" "$LOG_DIR/test.log" | tail -20 || true

              echo ""
              echo "### Final Result:"
              tail -5 "$LOG_DIR/test.log" | grep -E "(Successfully|Failed)" || echo "Test status unclear"
            fi

            # Show report if exists
            if [ -f "$LOG_DIR/report.txt" ]; then
              echo ""
              echo "### Report:"
              cat "$LOG_DIR/report.txt"
            fi
          else
            echo "No test logs found"
          fi

  script-validation:
    name: validate scripts
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: validate scripts are executable
        run: |
          echo "Checking script permissions..."
          for script in $(find . -name "*.sh" -o -name "*.zsh"); do
            if [ -f "$script" ]; then
              if [ ! -x "$script" ]; then
                echo "Warning: $script is not executable"
              fi
            fi
          done

      - name: check for syntax errors
        run: |
          echo "Checking shell script syntax..."
          for script in $(find . -name "*.sh"); do
            if [ -f "$script" ]; then
              bash -n "$script" || echo "Syntax error in $script"
            fi
          done

          for script in $(find . -name "*.zsh"); do
            if [ -f "$script" ]; then
              zsh -n "$script" || echo "Syntax error in $script"
            fi
          done

      - name: verify docker files
        run: |
          echo "Checking E2E test files exist..."
          [ -f "test/e2e/docker-e2e-test.zsh" ] || exit 1
          [ -f "test/runner.zsh" ] || exit 1
          echo "All required files present"

  test-summary:
    name: test result summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()

    steps:
      - name: check results
        run: |
          echo "## E2E Test Results"
          echo ""

          if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "**End-to-end tests passed successfully on all platforms**"
            echo ""
            echo "✅ Tests validated on:"
            echo "- Arch Linux (Docker)"
            echo "- Ubuntu 24.04 (Docker)"
            echo "- macOS (Native)"
          else
            echo "**End-to-end tests failed on one or more platforms**"
            echo ""
            echo "Please check the test logs for details."
            exit 1
          fi

      - name: create summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ needs.docker-integration.result }}';
            const status = result === 'success' ? 'passed' : 'failed';

            const body = `## End-to-End Test Results

            The E2E tests have ${status}.

            ${result === 'success'
              ? '- Setup script works correctly\n- All symlinks created\n- Tests pass in clean environment'
              : 'Please check the workflow logs for details.'}
            `;

            // Comment on PR
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });