name: Pages Build & Deploy

on:
  push:
    branches: [main]
    paths:
      - 'template/**'
      - 'README.md'
      - 'docs/**'
      - 'src/**'
      - '.github/workflows/pages.yml'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build-and-deploy:
    name: üìÑ Build & Deploy Pages
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: üèóÔ∏è Generate Site Content
        run: |
          echo "::group::Creating site structure"

          # Create output directory
          mkdir -p _site

          # Copy template files (HTML versions of configs)
          if [[ -d template ]]; then
            cp -r template/* _site/
          fi

          # Copy documentation
          if [[ -d docs ]]; then
            mkdir -p _site/docs
            cp -r docs/* _site/docs/
          fi

          # Generate mirror of source files if mirror.sh exists
          if [[ -f template/mirror.sh ]]; then
            echo "Running mirror.sh to generate file listings..."
            bash template/mirror.sh || true
            # Copy generated mirror to site
            if [[ -d template/mirror ]]; then
              cp -r template/mirror _site/
            fi
          fi

          # Copy README as index if no index.html exists
          if [[ ! -f _site/index.html ]] && [[ -f README.md ]]; then
            cp README.md _site/
          fi

          # Create 404 page
          cat > _site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <title>404 - Page Not Found</title>
              <style>
                  body {
                      font-family: monospace;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      height: 100vh;
                      margin: 0;
                      background: #1e1e1e;
                      color: #d4d4d4;
                  }
                  .container { text-align: center; }
                  h1 { font-size: 4rem; margin: 0; }
                  p { font-size: 1.2rem; }
                  a { color: #569cd6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>404</h1>
                  <p>Page not found</p>
                  <p><a href="/">‚Üê Back to home</a></p>
              </div>
          </body>
          </html>
          EOF

          # Create .nojekyll file to prevent Jekyll processing
          touch _site/.nojekyll

          # List generated files
          echo "Generated site structure:"
          ls -la _site/

          echo "::endgroup::"

      - name: üöÄ Deploy to GitHub Pages
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if gh-pages branch exists
          if git ls-remote --exit-code --heads origin gh-pages; then
            echo "gh-pages branch exists, fetching..."
            git fetch origin gh-pages
          else
            echo "Creating orphan gh-pages branch..."
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initial gh-pages commit"
            git push origin gh-pages
            git checkout main
          fi

          # Clone just the gh-pages branch into a temp directory
          cd /tmp
          git clone --single-branch --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" gh-pages
          cd gh-pages

          # Remove old files
          git rm -rf . || true

          # Copy new files
          cp -r "${{ github.workspace }}/_site/"* .
          cp "${{ github.workspace }}/_site/.nojekyll" . 2>/dev/null || true

          # Commit and push if there are changes
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to deploy"
          else
            git commit -m "Deploy to GitHub Pages from ${{ github.sha }}"
            git push origin gh-pages
            echo "‚úÖ Deployed to GitHub Pages"
          fi
