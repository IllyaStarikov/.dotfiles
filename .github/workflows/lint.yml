name: lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  shellcheck:
    name: shell scripts
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: run shellcheck
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck

          echo "::group::Checking shell scripts"
          find . -type f -name "*.sh" -not -path "./.git/*" -print0 | xargs -0 shellcheck -x || true
          find src/scripts -type f -exec grep -l '^#!/.*sh' {} \; | xargs shellcheck -x || true
          echo "::endgroup::"

  lua:
    name: lua files
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: cache tools
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/stylua
          key: ${{ runner.os }}-stylua-v0.19.1

      - name: check lua formatting
        run: |
          # Install stylua if not cached
          if ! command -v stylua &> /dev/null; then
            wget -qO stylua.zip https://github.com/JohnnyMorganz/StyLua/releases/download/v0.19.1/stylua-linux-x86_64.zip
            unzip -q stylua.zip && chmod +x stylua && sudo mv stylua /usr/local/bin/
          fi

          echo "::group::Checking Lua formatting"
          find src -name "*.lua" -type f | xargs stylua --check --config-path src/language/stylua.toml || true
          echo "::endgroup::"

  markdown:
    name: markdown
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: lint markdown
        run: |
          npm install -g markdownlint-cli --silent

          echo "::group::Checking markdown files"
          markdownlint '**/*.md' --ignore node_modules --ignore .github || true
          echo "::endgroup::"

  yaml:
    name: yaml files
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: validate yaml
        run: |
          npm install -g yaml-lint --silent

          echo "::group::Checking YAML files"
          find . -name "*.yml" -o -name "*.yaml" | grep -v node_modules | xargs -I {} sh -c 'echo "Checking: {}" && yaml-lint {} || true'
          echo "::endgroup::"

  json:
    name: json files
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: validate json
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq

          echo "::group::Checking JSON files"
          find . -name "*.json" -type f -not -path "./.git/*" | while read -r file; do
            echo "Checking: $file"
            jq . "$file" > /dev/null || echo "❌ Invalid JSON: $file"
          done
          echo "::endgroup::"

  code-quality:
    name: code quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: check code quality
        run: |
          echo "::group::Checking for code quality issues"

          # Check for trailing whitespace
          echo "Checking for trailing whitespace..."
          ! grep -r '[[:space:]]$' src/ test/ --include="*.sh" --include="*.lua" --include="*.py" 2>/dev/null || echo "⚠️ Trailing whitespace found"

          # Check for tabs in space-only files
          echo "Checking for tabs in space-only files..."
          ! grep -r $'\t' src/ --include="*.lua" --include="*.yml" --include="*.yaml" --include="*.json" 2>/dev/null || echo "⚠️ Tabs found in space-only files"

          # Check for CRLF line endings
          echo "Checking for Windows line endings..."
          ! find src/ test/ -type f -exec file {} \; | grep CRLF || echo "⚠️ Windows line endings found"

          # Check for large files
          echo "Checking for large files..."
          find . -type f -size +1M -not -path "./.git/*" -exec ls -lh {} \; | awk '{print "⚠️ Large file:", $9, "(" $5 ")"}'

          echo "::endgroup::"

  documentation:
    name: documentation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: check documentation
        run: |
          echo "::group::Checking documentation coverage"

          # Check for script documentation
          scripts=(
            "src/setup/setup.sh"
            "src/setup/symlinks.sh"
            "src/theme-switcher/switch-theme.sh"
            "src/scripts/update"
          )

          for script in "${scripts[@]}"; do
            if [[ -f "$script" ]]; then
              if ! grep -q -E "(usage\(\)|--help|Usage:)" "$script"; then
                echo "⚠️ No usage documentation in $script"
              else
                echo "✅ Documentation found in $script"
              fi
            fi
          done

          # Check README sections
          required_sections=(
            "Installation"
            "Usage"
            "Features"
            "Requirements"
          )

          for section in "${required_sections[@]}"; do
            if grep -q "## .*$section" README.md; then
              echo "✅ README section found: $section"
            else
              echo "⚠️ README section missing: $section"
            fi
          done

          echo "::endgroup::"

  lint-status:
    name: lint status
    if: always()
    needs: [shellcheck, lua, markdown, yaml, json, code-quality, documentation]
    runs-on: ubuntu-latest

    steps:
      - name: check lint results
        run: |
          echo "ShellCheck: ${{ needs.shellcheck.result }}"
          echo "Lua: ${{ needs.lua.result }}"
          echo "Markdown: ${{ needs.markdown.result }}"
          echo "YAML: ${{ needs.yaml.result }}"
          echo "JSON: ${{ needs.json.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"

          # All linting jobs are non-blocking (continue-on-error)
          echo "✅ Lint checks completed"
