# The Ultimate Dotfiles Showcase üåü
# Everything awesome in one spectacular demo

name: ultimate_showcase
root: ~/

# Launch with: tmuxinator start ultimate_showcase

windows:
  - welcome:
      layout: even-horizontal
      panes:
        - |
          clear
          echo "üåü THE ULTIMATE DOTFILES EXPERIENCE üåü"
          echo "====================================="
          echo ""
          echo "Welcome to the most advanced terminal"
          echo "development environment ever created!"
          echo ""
          echo "‚ö° Features:"
          echo "  ‚Ä¢ AI-Powered Coding (Claude/GPT/Ollama)"
          echo "  ‚Ä¢ Theme Magic (Auto Light/Dark)"
          echo "  ‚Ä¢ <1ms Completions (Blink.cmp)"
          echo "  ‚Ä¢ LaTeX Academia (VimTeX)"
          echo "  ‚Ä¢ Productivity Suite (Snacks.nvim)"
          echo "  ‚Ä¢ Full-Stack Ready"
          echo ""
          echo "üöÄ Let's explore each superpower..."
          sleep 3
          echo ""
          echo "Navigate windows with Ctrl+A + number"
        - |
          figlet -f slant "DOTFILES" | lolcat
          echo ""
          echo "üèÜ Performance Stats"
          echo "==================="
          echo ""
          echo "Neovim startup: 45ms"
          echo "Completion: <1ms"
          echo "Theme switch: 100ms"
          echo "Terminal spawn: 20ms"
          echo ""
          echo "üì¶ One-command setup:"
          echo "./src/setup/mac.sh"

  - ai_demo:
      layout: main-vertical
      main-pane-width: 70%
      panes:
        - |
          cat << 'EOF' > /tmp/ai_demo.py
          # ü§ñ AI-Assisted Development Demo
          
          class DataProcessor:
              """Select this class and press <leader>cr for AI review!"""
              
              def process_data(self, data):
                  # Bad code intentionally - let AI fix it!
                  result = []
                  for i in range(len(data)):
                      if data[i] > 0:
                          result.append(data[i] * 2)
                  return result
              
              # Select the method above and:
              # <leader>co - Optimize it
              # <leader>ce - Explain it
              # <leader>ct - Generate tests
          EOF
          nvim /tmp/ai_demo.py -c "echo 'ü§ñ AI CODING ASSISTANT'" -c "echo 'Try visual select + <leader>co to optimize!'"
        - |
          echo "üß† AI Models Available:"
          echo "======================"
          echo ""
          echo "1. Ollama (Local)"
          echo "2. Claude (Anthropic)"
          echo "3. GPT-4 (OpenAI)"
          echo "4. Copilot (GitHub)"
          echo ""
          echo "Switch: <leader>ca[l/a/o/c]"

  - speed_demo:
      layout: even-horizontal
      panes:
        - |
          mkdir -p /tmp/speed_test && cd /tmp/speed_test
          npm init -y &>/dev/null
          npm install react typescript @types/react &>/dev/null
          
          cat << 'EOF' > speed.tsx
          // ‚ö° Experience Sub-Millisecond Completion!
          
          import React from 'react';
          
          interface Props {
            // Start typing here - feel the speed!
            
          }
          
          const SpeedTest: React.FC<Props> = (props) => {
            // Type 'use' for React hooks
            // Type 'console.' for methods
            // Type 'Math.' for calculations
            
            return (
              <div>
                {/* Type '<' for JSX components */}
              </div>
            );
          };
          
          // Snippet test: Type 'rfc' and Tab
          EOF
          nvim speed.tsx -c "echo '‚ö° BLAZING FAST COMPLETIONS'"
        - |
          echo "üìä Live Performance"
          echo "=================="
          echo ""
          watch -n 0.5 'echo "LSP Status: Active"
          echo "Completion: <1ms"
          echo "CPU Usage: $(ps aux | grep nvim | awk "{print \$3}")%"
          echo "Memory: $(ps aux | grep nvim | awk "{print \$4}")%"
          echo ""
          echo "üèéÔ∏è Faster than thought!"'

  - theme_live:
      layout: tiled
      panes:
        - |
          echo "üé® LIVE THEME SWITCHING"
          echo "======================"
          echo ""
          echo "1. Open System Settings"
          echo "2. Toggle Appearance"
          echo "3. Run: theme"
          echo "4. Watch the magic! ‚ú®"
          echo ""
          echo "Current: $(cat ~/.config/theme-switcher/current-theme.sh | grep MACOS_THEME | cut -d'=' -f2)"
        - nvim -c "echo 'üåì Theme follows macOS!'"
        - |
          echo "üé≠ What Transforms:"
          echo "=================="
          echo "‚úì Terminal colors"
          echo "‚úì Editor theme"
          echo "‚úì Status bars"
          echo "‚úì Prompts"
        - alacritty -e sh -c "echo 'üñ•Ô∏è New terminal inherits theme!' && $SHELL"

  - productivity:
      layout: main-horizontal
      main-pane-height: 80%
      panes:
        - nvim -c "echo 'üöÄ PRODUCTIVITY POWERHOUSE'" \
               -c "echo ''" \
               -c "echo 'Try these commands:'" \
               -c "echo '  <leader>ff - Find files (smart sorting)'" \
               -c "echo '  <leader>fg - Live grep (blazing fast)'" \
               -c "echo '  <leader>te - Terminal (instant spawn)'" \
               -c "echo '  <leader>tg - LazyGit (beautiful git)'" \
               -c "echo '  <leader>z  - Zen mode (focus time)'" \
               -c "echo '  <C-t>      - Context menu (everywhere!)'"
        - |
          echo "‚ö° Replaces 15+ plugins:"
          echo "telescope, toggleterm, alpha,"
          echo "bufdelete, git-signs, and more!"

  - fullstack:
      layout: even-vertical
      panes:
        - |
          echo "üíª FULL-STACK READY"
          echo "=================="
          echo ""
          echo "Frontend: React, Vue, Svelte"
          echo "Backend: Node, Python, Go, Rust"
          echo "Database: PostgreSQL, MongoDB"
          echo "DevOps: Docker, K8s, Terraform"
          echo ""
          echo "All with perfect LSP support!"
        - |
          echo "üîß Active Language Servers:"
          echo ""
          echo "TypeScript ‚úÖ"
          echo "Python ‚úÖ"
          echo "Rust ‚úÖ"
          echo "Go ‚úÖ"
          echo "And 20+ more!"
        - |
          echo "üìö Documentation:"
          echo "=================="
          echo ""
          echo "CLAUDE.md - AI instructions"
          echo "SNACKS_GUIDE.md - Shortcuts"
          echo "VIMTEX_GUIDE.md - LaTeX help"
          echo ""
          echo "üåê dotfiles.starikov.io"

  - finale:
      layout: even-horizontal
      panes:
        - |
          echo "üéâ THAT'S JUST THE BEGINNING! üéâ"
          echo "================================"
          echo ""
          echo "This dotfiles repo includes:"
          echo ""
          echo "üìÅ Complete configurations for:"
          echo "  ‚Ä¢ Neovim (Lua, 100+ plugins)"
          echo "  ‚Ä¢ Zsh (Oh My Zsh + Spaceship)"
          echo "  ‚Ä¢ tmux (Custom keybindings)"
          echo "  ‚Ä¢ Git (Aliases + tools)"
          echo "  ‚Ä¢ Alacritty (GPU-accelerated)"
          echo ""
          echo "üîß One-line installation"
          echo "üé® Auto theme switching"
          echo "ü§ñ AI coding integration"
          echo "‚ö° Insane performance"
          echo ""
          echo "‚≠ê Star the repo!"
          echo "github.com/yourusername/dotfiles"
        - |
          figlet "ENJOY!" | lolcat
          echo ""
          echo "üöÄ Happy Coding! üöÄ"
          echo ""
          echo "Questions? Check:"
          echo "‚Ä¢ README.md"
          echo "‚Ä¢ CLAUDE.md"
          echo "‚Ä¢ Template files"
          echo ""
          echo "üí° Pro tip: Fork and"
          echo "   customize to your"
          echo "   own workflow!"