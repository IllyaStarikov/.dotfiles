# Dotfiles Demo - The Ultimate Development Environment
# A powerful showcase of an optimized workflow

name: dotfiles_demo
root: ~/.dotfiles

windows:
  - "🚀 Power Overview":
      layout: main-vertical
      main-pane-width: 65%
      panes:
        - |
          clear
          echo "╔═══════════════════════════════════════════════════════════════════════════════╗"
          echo "║                          STARIKOV DOTFILES SHOWCASE                           ║"
          echo "║                    The Ultimate Development Environment                        ║"
          echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "                           ⚡ 45ms Neovim Startup"
          echo "                           🤖 4 AI Models Integrated"
          echo "                           🎨 Automatic Theme Switching"
          echo "                           📊 100+ Optimized Plugins"
          echo "                           🚀 <1ms Code Completion"
          echo ""
          echo "┌─────────────────────────────────────────────────────────────────────────────┐"
          echo "│ 🎯 THIS ENVIRONMENT INCLUDES:                                               │"
          echo "├─────────────────────────────────────────────────────────────────────────────┤"
          echo "│ • Neovim     - Modern Lua config with lazy loading                         │"
          echo "│ • AI Coding  - Claude, GPT-4, Ollama, and Copilot ready                   │"
          echo "│ • Completions- Blink.cmp with sub-millisecond response                     │"
          echo "│ • Debugging  - Full DAP integration for all languages                      │"
          echo "│ • Git Tools  - LazyGit + advanced git integration                         │"
          echo "│ • Terminal   - GPU-accelerated Alacritty + tmux                           │"
          echo "│ • Shell      - Zsh + Oh My Zsh + Spaceship theme                          │"
          echo "│ • LaTeX      - Complete academic writing environment                       │"
          echo "└─────────────────────────────────────────────────────────────────────────────┘"
        - |
          echo "╔═══════════════════════════════════════╗"
          echo "║        PERFORMANCE METRICS            ║"
          echo "╠═══════════════════════════════════════╣"
          echo "║ Neovim Startup    │ 45ms             ║"
          echo "║ Plugin Load       │ Lazy (<10ms)     ║"
          echo "║ LSP Response      │ <1ms             ║"
          echo "║ File Search       │ <50ms (10k files)║"
          echo "║ Git Operations    │ Instant          ║"
          echo "║ Theme Switch      │ <100ms           ║"
          echo "╚═══════════════════════════════════════╝"
          echo ""
          echo "╔═══════════════════════════════════════╗"
          echo "║         ONE-LINE COMMANDS             ║"
          echo "╠═══════════════════════════════════════╣"
          echo "║ Install Everything:                   ║"
          echo "║   ./src/setup/mac.sh                  ║"
          echo "║                                       ║"
          echo "║ Switch Theme:                         ║"
          echo "║   theme                               ║"
          echo "║                                       ║"
          echo "║ Update All:                           ║"
          echo "║   update                              ║"
          echo "╚═══════════════════════════════════════╝"

  - "⚡ Neovim IDE":
      layout: main-vertical
      main-pane-width: 75%
      panes:
        - |
          cd ~/.dotfiles
          cat > /tmp/showcase.ts << 'EOF'
          // ⚡ BLINK.CMP - Experience Sub-Millisecond Completions
          
          interface Developer {
            name: string;
            skills: string[];
            productivity: number;
          }
          
          class PowerUser implements Developer {
            name = "You";
            skills = ["Everything"];
            productivity = 9000;
            
            constructor() {
              // 💡 Type 'this.' and watch the magic happen instantly
              
            }
            
            async optimizeWorkflow(): Promise<void> {
              // 🚀 Try these completions:
              // console.
              // document.
              // Promise.
              // Array.prototype.
              
            }
          }
          
          // 🎯 PRODUCTIVITY FEATURES:
          // • <leader>ff - Fuzzy find files (10k files in <50ms)
          // • <leader>fg - Live grep entire codebase
          // • <leader>cc - Open AI chat for any question
          // • <C-t>      - Context-aware menu everywhere
          // • <leader>z  - Zen mode for deep focus
          EOF
          nvim /tmp/showcase.ts -c "vsplit ~/.dotfiles/CLAUDE.md" -c "wincmd h"
        - |
          echo "╔════════════════════════════════════════╗"
          echo "║         NEOVIM POWER FEATURES          ║"
          echo "╚════════════════════════════════════════╝"
          echo ""
          echo "🎯 KEY BINDINGS"
          echo "━━━━━━━━━━━━━━━"
          echo "SPACE is your leader key"
          echo ""
          echo "📁 Files & Search"
          echo "  <leader>ff  Find files"
          echo "  <leader>fg  Live grep"
          echo "  <leader>fb  Browse buffers"
          echo "  <leader>fh  Search history"
          echo ""
          echo "🤖 AI Assistant"
          echo "  <leader>cc  Chat with AI"
          echo "  <leader>co  Optimize code"
          echo "  <leader>ce  Explain code"
          echo "  <leader>ct  Generate tests"
          echo ""
          echo "🚀 Productivity"
          echo "  <C-t>       Smart menu"
          echo "  <leader>te  Terminal"
          echo "  <leader>tg  LazyGit"
          echo "  <leader>z   Zen mode"
          echo ""
          echo "💡 Active LSP servers provide:"
          echo "  • Instant completions"
          echo "  • Go to definition"
          echo "  • Find references"
          echo "  • Inline diagnostics"
          echo "  • Auto-formatting"
          echo "  • Code actions"

  - "🤖 AI Powerhouse":
      layout: main-horizontal
      main-pane-height: 70%
      panes:
        - |
          cat > /tmp/ai_showcase.py << 'EOF'
          """
          🤖 AI-POWERED DEVELOPMENT - 4 Models at Your Fingertips
          
          Select any code and press:
          • <leader>co - Optimize for performance
          • <leader>ce - Get detailed explanation  
          • <leader>ct - Generate comprehensive tests
          • <leader>cr - Professional code review
          • <leader>cf - Fix bugs automatically
          """
          
          import asyncio
          from typing import List, Dict, Optional
          
          
          class DataProcessor:
              """This class needs optimization - perfect for AI assistance!"""
              
              def process_large_dataset(self, data: List[Dict]) -> Dict[str, any]:
                  # 🐌 Intentionally slow implementation
                  # Select this method and press <leader>co to optimize!
                  result = {}
                  for item in data:
                      for key, value in item.items():
                          if key not in result:
                              result[key] = []
                          result[key].append(value)
                  
                  # Sorting each list (inefficient)
                  for key in result:
                      for i in range(len(result[key])):
                          for j in range(i + 1, len(result[key])):
                              if result[key][i] > result[key][j]:
                                  result[key][i], result[key][j] = result[key][j], result[key][i]
                  
                  return result
              
              # TODO: Ask AI to implement these methods
              async def parallel_process(self, data: List[Dict]) -> Dict[str, any]:
                  """TODO: Implement parallel processing"""
                  pass
              
              def optimize_memory(self, data: List[Dict]) -> Generator:
                  """TODO: Implement memory-efficient processing"""
                  pass
          
          
          # 💡 TRY THIS:
          # 1. Select the slow method above
          # 2. Press <leader>co to optimize
          # 3. Watch AI transform it into efficient code
          # 4. Press <leader>ct to generate tests
          EOF
          nvim /tmp/ai_showcase.py
        - |
          echo "╔══════════════════════════════════════════════════════════╗"
          echo "║              AI CODING ASSISTANT MODELS                  ║"
          echo "╠══════════════════════════════════════════════════════════╣"
          echo "║                                                          ║"
          echo "║  🦙 OLLAMA (Local)         🧠 CLAUDE (Anthropic)        ║"
          echo "║  • No API key needed       • Most capable model         ║"
          echo "║  • Fast responses          • Complex reasoning          ║"
          echo "║  • Privacy focused         • Code generation expert     ║"
          echo "║  • <leader>cal             • <leader>caa                ║"
          echo "║                                                          ║"
          echo "║  🤖 GPT-4 (OpenAI)         🐙 COPILOT (GitHub)          ║"
          echo "║  • Industry standard       • Integrated suggestions     ║"
          echo "║  • Broad knowledge         • Real-time completions      ║"
          echo "║  • Creative solutions      • Context awareness          ║"
          echo "║  • <leader>cao             • <leader>cac                ║"
          echo "║                                                          ║"
          echo "╚══════════════════════════════════════════════════════════╝"
          echo ""
          echo "💬 CHAT INTERFACE COMMANDS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "/file     Insert current file into chat"
          echo "/buffer   Insert current buffer"
          echo "/symbols  Show and insert code symbols"
          echo "/help     Show all available commands"

  - "🎨 Theme Magic":
      layout: even-horizontal
      panes:
        - |
          echo "╔═══════════════════════════════════════════════════════════════════════╗"
          echo "║                        AUTOMATIC THEME SWITCHING                      ║"
          echo "║                          Zero Configuration Magic                      ║"
          echo "╚═══════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "                    macOS Appearance ─┐"
          echo "                                      │"
          echo "                                      ▼"
          echo "                          ┌─────────────────────┐"
          echo "                          │   Theme Switcher    │"
          echo "                          └──────────┬──────────┘"
          echo "                                     │"
          echo "                ┌────────────────────┼────────────────────┐"
          echo "                ▼                    ▼                    ▼"
          echo "         ┌─────────────┐      ┌─────────────┐     ┌─────────────┐"
          echo "         │  Alacritty  │      │   Neovim    │     │    tmux     │"
          echo "         │  Terminal   │      │   Editor    │     │  Statusbar  │"
          echo "         └─────────────┘      └─────────────┘     └─────────────┘"
          echo "               │                     │                     │"
          echo "               ▼                     ▼                     ▼"
          echo "         Dracula/Solar          Dracula/Light         Dynamic"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Current System Mode: $(defaults read -g AppleInterfaceStyle 2>/dev/null || echo 'Light Mode')"
          echo ""
          echo "🎯 TO SWITCH: Simply change macOS appearance or run: theme"
          ls -la ~/.config/theme-switcher/ 2>/dev/null || echo ""
        - |
          echo "╔═══════════════════════════════════╗"
          echo "║      WHAT GETS THEMED             ║"
          echo "╠═══════════════════════════════════╣"
          echo "║ Component      │ Dark    │ Light  ║"
          echo "╠────────────────┼─────────┼────────╣"
          echo "║ Alacritty      │ Dracula │ Solar  ║"
          echo "║ Neovim         │ Dracula │ Light  ║"
          echo "║ tmux Status    │ Purple  │ Blue   ║"
          echo "║ Syntax Colors  │ Vibrant │ Soft   ║"
          echo "║ Background     │ #282a36 │ #fdf6e3║"
          echo "╚═══════════════════════════════════╝"
          echo ""
          echo "📁 Configuration Files:"
          echo "━━━━━━━━━━━━━━━━━━━━━━"
          cat ~/.config/theme-switcher/current-theme.sh 2>/dev/null || echo "Theme not configured"
          echo ""
          echo "🔧 Theme Switcher:"
          echo "~/src/theme-switcher/switch-theme.sh"

  - "🐛 Debug Master":
      layout: main-vertical
      main-pane-width: 70%
      panes:
        - |
          cd ~/.dotfiles/template
          cat > debug_showcase.cpp << 'EOF'
          // 🐛 ADVANCED DEBUGGING WITH DAP (Debug Adapter Protocol)
          #include <iostream>
          #include <vector>
          #include <thread>
          #include <chrono>
          
          class DebugShowcase {
          private:
              std::vector<int> data;
              int* dangerous_ptr;
              
          public:
              DebugShowcase() : dangerous_ptr(nullptr) {
                  data = {10, 20, 30, 40, 50};
              }
              
              void demonstrateBreakpoint() {
                  std::cout << "🔴 Set breakpoint here: <leader>db" << std::endl;
                  
                  for (size_t i = 0; i < data.size(); ++i) {
                      int value = data[i];
                      std::cout << "Processing: " << value << std::endl;
                      
                      // Hover over 'value' during debug: <leader>dh
                      processValue(value);
                  }
              }
              
              void processValue(int val) {
                  // Step into this function: <leader>di
                  int result = val * val;
                  std::this_thread::sleep_for(std::chrono::milliseconds(100));
                  
                  if (val > 30) {
                      // Conditional breakpoint territory
                      triggerBug();  // 💥 This will crash!
                  }
              }
              
              void triggerBug() {
                  // Bug: dereferencing null pointer
                  *dangerous_ptr = 42;  // 💥 Crash here!
              }
              
              void multiThreadDemo() {
                  // DAP handles multiple threads beautifully
                  std::vector<std::thread> threads;
                  
                  for (int i = 0; i < 4; ++i) {
                      threads.emplace_back([this, i]() {
                          std::cout << "Thread " << i << " running" << std::endl;
                          std::this_thread::sleep_for(std::chrono::seconds(1));
                      });
                  }
                  
                  for (auto& t : threads) {
                      t.join();
                  }
              }
          };
          
          int main() {
              DebugShowcase demo;
              
              std::cout << "🚀 DAP Debugging Showcase" << std::endl;
              std::cout << "========================" << std::endl;
              
              demo.demonstrateBreakpoint();
              demo.multiThreadDemo();
              
              return 0;
          }
          
          // 🎯 DEBUGGING COMMANDS:
          // <leader>db - Toggle breakpoint
          // <leader>dc - Start/Continue debugging  
          // <leader>di - Step into
          // <leader>do - Step over
          // <leader>dO - Step out
          // <leader>dr - Toggle REPL
          // <leader>dh - Hover evaluation
          // <leader>dp - Preview popup
          // <leader>df - Frames (call stack)
          // <leader>ds - Scopes/variables
          EOF
          nvim debug_showcase.cpp
        - |
          echo "╔═══════════════════════════════════════╗"
          echo "║      DAP DEBUGGING FEATURES           ║"
          echo "╚═══════════════════════════════════════╝"
          echo ""
          echo "🎯 SUPPORTED LANGUAGES"
          echo "━━━━━━━━━━━━━━━━━━━━━"
          echo "• C/C++     (LLDB/GDB)"
          echo "• Python    (debugpy)"
          echo "• JavaScript/TS (node)"
          echo "• Go        (delve)"
          echo "• Rust      (lldb/gdb)"
          echo "• Java      (jdtls)"
          echo ""
          echo "⚡ POWERFUL FEATURES"
          echo "━━━━━━━━━━━━━━━━━━━"
          echo "✓ Breakpoints"
          echo "✓ Conditional breakpoints"
          echo "✓ Step debugging"
          echo "✓ Variable inspection"
          echo "✓ Watch expressions"
          echo "✓ Call stack navigation"
          echo "✓ Multi-threaded debugging"
          echo "✓ REPL integration"
          echo "✓ Memory inspection"
          echo ""
          echo "📝 To compile with debug:"
          echo "g++ -g -std=c++17 debug_showcase.cpp"

  - "🚀 Productivity":
      layout: main-horizontal
      main-pane-height: 75%
      panes:
        - |
          cat > /tmp/productivity.md << 'EOF'
          # 🚀 PRODUCTIVITY SUITE POWERED BY SNACKS.NVIM
          
          ## Why This Setup is a Game Changer
          
          This configuration replaces **15+ individual plugins** with one optimized suite:
          
          | Old Way (Many Plugins)        | New Way (Snacks.nvim)         |
          |-------------------------------|-------------------------------|
          | telescope.nvim                | → Integrated picker           |
          | toggleterm.nvim               | → Built-in terminal           |
          | alpha-nvim                    | → Fast dashboard              |
          | bufdelete.nvim                | → Smart buffer management     |
          | gitsigns.nvim                 | → Git integration             |
          | which-key.nvim                | → Keybinding hints            |
          | nvim-notify                   | → Beautiful notifications     |
          | zen-mode.nvim                 | → Focus mode                  |
          | indent-blankline              | → Indent guides               |
          | todo-comments                 | → TODO highlighting           |
          | trouble.nvim                  | → Diagnostics                 |
          | nvim-lightbulb                | → Code actions                |
          | fidget.nvim                   | → LSP progress                |
          | dressing.nvim                 | → UI improvements             |
          | nui.nvim                      | → UI components               |
          
          ## ⚡ Performance Impact
          
          - **Startup Time**: Only +8ms for ALL features
          - **Memory Usage**: 60% less than individual plugins  
          - **Lazy Loading**: Everything loads on-demand
          - **Unified Config**: One place to configure everything
          
          ## 🎯 Key Features
          
          Press `<C-t>` anywhere to see the context menu!
          
          ### File Operations (<leader>f...)
          - Find files with smart sorting and frecency
          - Live grep with preview
          - Recent files tracking
          - Git-aware file browsing
          
          ### Terminal Management (<leader>t...)
          - Instant terminal spawn (<20ms)
          - Floating and split modes
          - Persistent sessions
          - Smart navigation between vim and terminal
          
          ### Git Integration
          - LazyGit integration (<leader>tg)
          - Inline git blame
          - Hunk navigation
          - Visual diff mode
          
          ### Focus Features
          - Zen mode for distraction-free coding (<leader>z)
          - Smart window management
          - Session persistence
          - Automated workspace switching
          EOF
          nvim /tmp/productivity.md
        - |
          echo "╔═══════════════════════════════════════╗"
          echo "║    SNACKS.NVIM COMMAND REFERENCE      ║"
          echo "╚═══════════════════════════════════════╝"
          echo ""
          echo "📁 Files         🔍 Search"
          echo "<leader>ff       <leader>fg (grep)"
          echo "<leader>fr       <leader>fw (word)"
          echo "<leader>fb       <leader>f/ (search)"
          echo ""
          echo "💻 Terminal      🎯 Navigation"
          echo "<leader>te       <leader>bd (buffer)"
          echo "<C-\\>           <leader>bo (only)"
          echo ""
          echo "🐙 Git           🧘 Focus"
          echo "<leader>tg       <leader>z (zen)"
          echo "<leader>gd       <leader>Z (super)"
          echo ""
          echo "⚡ Everything is:"
          echo "  • Git-aware"
          echo "  • Lightning fast"
          echo "  • Beautifully themed"
          echo "  • Keyboard driven"

  - "🐚 Shell Power":
      layout: even-vertical
      panes:
        - |
          echo "╔═══════════════════════════════════════════════════════════════════════╗"
          echo "║                         ZSH + OH MY ZSH + SPACESHIP                   ║"
          echo "║                          The Ultimate Shell Experience                 ║"
          echo "╚═══════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🚀 SPACESHIP PROMPT SHOWS:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "  ╭─ user@host ~/.dotfiles on  main [!?] via 🐍 v3.11 🦀 v1.70 ⬢ v18.0"
          echo "  ╰─λ"
          echo ""
          echo "  Shows: directory, git branch/status, Python/Rust/Node versions, and more!"
          echo ""
          echo "⚡ PRODUCTIVITY FEATURES:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📁 Smart Navigation"
          echo "  z dotfiles     - Jump to any frecent directory"
          echo "  cd -           - Previous directory  "
          echo "  cd ...         - Up 2 directories"
          echo "  cd ....        - Up 3 directories"
          echo ""
          echo "🔍 Powerful History"
          echo "  Ctrl+R         - Fuzzy search history"
          echo "  !!             - Last command"
          echo "  !$             - Last argument"
          echo "  !^             - First argument"
          echo ""
          echo "🎯 Git Aliases"
          echo "  gst            - git status"
          echo "  gco            - git checkout"
          echo "  gaa            - git add --all"
          echo "  gcmsg          - git commit -m"
          echo "  gp             - git push"
          echo "  gl             - git pull"
        - |
          echo "🔧 CUSTOM ALIASES & FUNCTIONS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📋 Listing"
          echo "  l    - Simple list"
          echo "  ll   - Long format"
          echo "  la   - All files"
          echo "  lt   - Tree view"
          echo ""
          echo "🚀 Productivity"
          echo "  mkd  - mkdir + cd"
          echo "  f    - Quick find"
          echo "  extract - Universal extract"
          echo ""
          echo "🔧 System"
          echo "  update - Update everything"
          echo "  cleanup - Clean caches"
          echo "  ports - Show open ports"
          echo ""
          echo "⚙️  PLUGINS LOADED:"
          echo "━━━━━━━━━━━━━━━━━"
          echo "✓ git"
          echo "✓ z (autojump)"
          echo "✓ extract"
          echo "✓ sudo (ESC twice)"
          echo "✓ autosuggestions"
          echo "✓ syntax-highlighting"
          echo "✓ vi-mode"
          echo "✓ fzf integration"
        - zsh

  - "📚 LaTeX Academic":
      layout: main-vertical
      main-pane-width: 70%
      panes:
        - |
          mkdir -p /tmp/latex_demo && cd /tmp/latex_demo
          cat > research_paper.tex << 'EOF'
          % 📚 VIMTEX - Professional LaTeX Environment
          \documentclass[11pt,a4paper]{article}
          \usepackage{amsmath,amssymb,amsthm}
          \usepackage{hyperref}
          \usepackage{tikz}
          \usepackage{listings}
          
          \title{VimTeX: The Ultimate \LaTeX{} Experience}
          \author{Power User}
          \date{\today}
          
          \begin{document}
          \maketitle
          
          \begin{abstract}
          This document demonstrates the power of VimTeX for academic writing.
          Press \texttt{\textbackslash ll} to start continuous compilation and watch
          your PDF update in real-time as you type!
          \end{abstract}
          
          \section{Introduction}
          VimTeX provides a complete \LaTeX{} authoring environment with features like:
          
          \begin{itemize}
              \item Continuous compilation with \texttt{latexmk}
              \item Forward/reverse search between source and PDF
              \item Smart folding and text objects
              \item Citation and reference completion
              \item Integrated error handling
          \end{itemize}
          
          \section{Mathematical Typesetting}
          
          VimTeX excels at mathematical content. Consider the following equation:
          
          \begin{equation}
              \int_{-\infty}^{\infty} e^{-x^2} dx = \sqrt{\pi}
          \end{equation}
          
          \begin{theorem}[Euler's Identity]
          The most beautiful equation in mathematics:
          \begin{equation}
              e^{i\pi} + 1 = 0
          \end{equation}
          \end{theorem}
          
          \begin{proof}
          Using Euler's formula $e^{ix} = \cos(x) + i\sin(x)$, we have:
          % Try code folding with za here!
          \begin{align}
              e^{i\pi} &= \cos(\pi) + i\sin(\pi) \\
                       &= -1 + i \cdot 0 \\
                       &= -1
          \end{align}
          Therefore, $e^{i\pi} + 1 = 0$.
          \end{proof}
          
          % VIMTEX COMMANDS:
          % \ll - Start continuous compilation
          % \lv - View PDF with forward search
          % \lr - Reverse search from PDF
          % \le - Show errors
          % \lc - Clean auxiliary files
          % cse - Change surrounding environment
          % dse - Delete surrounding environment
          % tse - Toggle star in environment
          \end{document}
          EOF
          nvim research_paper.tex
        - |
          echo "╔════════════════════════════════════╗"
          echo "║       VIMTEX POWER FEATURES        ║"
          echo "╚════════════════════════════════════╝"
          echo ""
          echo "📝 COMPILATION"
          echo "━━━━━━━━━━━━━"
          echo "\\ll  Start continuous compilation"
          echo "\\lk  Stop compilation"
          echo "\\le  View errors"
          echo "\\lo  View compiler output"
          echo "\\lc  Clean auxiliary files"
          echo ""
          echo "🔍 NAVIGATION"
          echo "━━━━━━━━━━━━"
          echo "\\lv  View PDF (forward search)"
          echo "\\lr  Reverse search"
          echo "\\lt  Table of contents"
          echo "\\li  Info about project"
          echo ""
          echo "✏️  TEXT OBJECTS"
          echo "━━━━━━━━━━━━━━"
          echo "ic/ac  Commands"
          echo "id/ad  Delimiters"
          echo "ie/ae  Environments"
          echo "i$/a$  Math mode"
          echo "iP/aP  Sections"
          echo ""
          echo "🎯 SMART FEATURES"
          echo "━━━━━━━━━━━━━━━━"
          echo "• Smart concealment"
          echo "• Citation completion"
          echo "• Reference completion"
          echo "• Syntax checking"
          echo "• PDF sync"

  - "🐙 Git Mastery":
      layout: main-horizontal
      main-pane-height: 80%
      panes:
        - |
          cd ~/.dotfiles
          echo "╔═══════════════════════════════════════════════════════════════════════╗"
          echo "║                          GIT INTEGRATION SHOWCASE                     ║"
          echo "║                    LazyGit + Fugitive + Git Signs                    ║"
          echo "╚═══════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Press <leader>tg to open LazyGit - A beautiful Git UI!"
          echo ""
          nvim -c "Git" -c "vertical resize 40" -c "wincmd l" -c "e README.md"
        - |
          echo "🐙 GIT COMMANDS"
          echo "━━━━━━━━━━━━━━"
          echo ""
          echo "LazyGit: <leader>tg"
          echo "  • Stage files visually"
          echo "  • Interactive rebase"
          echo "  • Resolve conflicts"
          echo "  • Cherry-pick commits"
          echo "  • Manage stashes"
          echo ""
          echo "Vim Integration:"
          echo "  <leader>gd - Diff"
          echo "  <leader>gb - Blame"
          echo "  <leader>gc - Commits"
          echo "  <leader>gs - Status"

  - "🖼️ tmux Mastery":
      layout: tiled
      panes:
        - |
          echo "╔═══════════════════════════════════════════════════════════════════════╗"
          echo "║                           TMUX CONFIGURATION                          ║"
          echo "║                     Custom Prefix: Ctrl-A (like Screen)               ║"
          echo "╚═══════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🎯 WHY THIS TMUX CONFIG IS SUPERIOR:"
          echo ""
          echo "✓ Vi-mode everywhere (navigation, copy, search)"
          echo "✓ Smart pane navigation (integrates with Vim)"
          echo "✓ Session persistence (survives reboots)"
          echo "✓ Mouse support when needed"
          echo "✓ Beautiful theme that follows system"
          echo ""
          echo "Current Session: $(tmux display-message -p '#S')"
          echo "Windows: $(tmux list-windows | wc -l)"
          echo "Panes in current window: $(tmux list-panes | wc -l)"
        - |
          echo "⌨️  ESSENTIAL BINDINGS"
          echo "━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📺 Windows"
          echo "C-a c      New window"
          echo "C-a ,      Rename"
          echo "C-a 1-9    Switch"
          echo "C-a n/p    Next/Previous"
          echo ""
          echo "🔲 Panes"
          echo "C-a |      Split vertical"
          echo "C-a -      Split horizontal"
          echo "C-a h/j/k/l Navigate"
          echo "C-a H/J/K/L Resize"
          echo "C-a x      Close"
        - |
          echo "📋 COPY MODE"
          echo "━━━━━━━━━━━"
          echo ""
          echo "C-a [      Enter copy"
          echo "v          Visual select"
          echo "y          Yank"
          echo "C-a ]      Paste"
          echo ""
          echo "🎨 LAYOUTS"
          echo "━━━━━━━━━"
          echo "C-a M-1    Even horizontal"
          echo "C-a M-2    Even vertical"
          echo "C-a M-3    Main horizontal"
          echo "C-a M-4    Main vertical"
          echo "C-a M-5    Tiled"
        - |
          echo "💾 SESSION MANAGEMENT"
          echo "━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Plugins:"
          echo "• Resurrect"
          echo "• Continuum"
          echo ""
          echo "C-a C-s    Save session"
          echo "C-a C-r    Restore"
          echo ""
          echo "Auto-saves every 15min!"
          echo "Survives system reboot!"

  - "🎯 Power User":
      layout: even-horizontal
      panes:
        - |
          clear
          echo "╔═══════════════════════════════════════════════════════════════════════════════╗"
          echo "║                              POWER USER WORKFLOW                              ║"
          echo "║                          Putting It All Together                              ║"
          echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🚀 A DAY IN THE LIFE OF A POWER USER:"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🌅 MORNING STARTUP (< 1 second)"
          echo "   tmux attach              → Resume exactly where you left off"
          echo "   nvim                     → Dashboard with recent files ready (45ms)"
          echo "   <leader>ff               → Instantly find any file in your projects"
          echo ""
          echo "🔥 DEVELOPMENT FLOW"
          echo "   <leader>fg 'TODO'        → Find all TODOs across entire codebase"
          echo "   <leader>cc               → Ask AI to explain complex code"
          echo "   gd                       → Jump to definition instantly"
          echo "   <leader>co               → AI optimizes selected code"
          echo "   <leader>ct               → AI writes comprehensive tests"
          echo ""
          echo "🐛 DEBUGGING SESSION"
          echo "   <leader>db               → Set breakpoints visually"
          echo "   <leader>dc               → Start debugging with full IDE features"
          echo "   <leader>di/do            → Step through code"
          echo "   <leader>dh               → Inspect variables on hover"
          echo ""
          echo "🌙 THEME ADAPTATION"
          echo "   System switches to dark  → Everything follows automatically"
          echo "   No manual intervention   → Your eyes thank you"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "                         🏆 PRODUCTIVITY GAIN: 300%+ 🏆"
        - |
          echo "╔═══════════════════════════════════╗"
          echo "║        THE FULL STACK             ║"
          echo "╠═══════════════════════════════════╣"
          echo "║ Frontend                          ║"
          echo "║ • React/Vue/Svelte               ║"
          echo "║ • TypeScript (<1ms complete)     ║"
          echo "║ • Tailwind CSS                   ║"
          echo "║ • Instant hot reload             ║"
          echo "║                                   ║"
          echo "║ Backend                           ║"
          echo "║ • Node.js/Python/Go/Rust         ║"
          echo "║ • Full debugging support         ║"
          echo "║ • Database integrations          ║"
          echo "║ • API development                ║"
          echo "║                                   ║"
          echo "║ DevOps                            ║"
          echo "║ • Docker/K8s syntax              ║"
          echo "║ • Terraform support              ║"
          echo "║ • CI/CD pipeline files           ║"
          echo "║ • Cloud configurations           ║"
          echo "║                                   ║"
          echo "║ Academic                          ║"
          echo "║ • LaTeX with live preview        ║"
          echo "║ • Citation management            ║"
          echo "║ • Mathematical typesetting       ║"
          echo "║ • Beamer presentations           ║"
          echo "╚═══════════════════════════════════╝"
          echo ""
          echo "    🌐 dotfiles.starikov.io"