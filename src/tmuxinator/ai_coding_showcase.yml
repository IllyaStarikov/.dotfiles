# AI-Powered Coding Showcase ðŸ¤–
# Demonstrate the future of coding with integrated AI assistance

name: ai_coding_showcase
root: ~/

# Launch with: tmuxinator start ai_coding_showcase

windows:
  - ai_chat:
      layout: even-horizontal
      panes:
        - nvim -c "echo 'ðŸ¤– AI-Powered Development Environment'" -c "echo ''" -c "echo 'Press <leader>cc to open AI chat'" -c "echo 'Press <leader>ca for action palette'" -c "echo ''" -c "echo 'Available AI Adapters:'" -c "echo '  â€¢ Local Ollama (default)'" -c "echo '  â€¢ Anthropic Claude'" -c "echo '  â€¢ OpenAI GPT'" -c "echo '  â€¢ GitHub Copilot'" -c "echo ''" -c "echo 'Try: Select code and press <leader>cr for instant code review!'"
        - |
          echo "ðŸ“Š Live AI Status Monitor"
          echo "========================"
          echo ""
          echo "Current Model: Ollama llama3.2:latest"
          echo "Status: Ready"
          echo ""
          echo "Quick Actions:"
          echo "  â€¢ <leader>co - Optimize code"
          echo "  â€¢ <leader>ct - Generate tests" 
          echo "  â€¢ <leader>ce - Explain code"
          echo "  â€¢ <leader>cf - Fix bugs"
          echo ""
          watch -n 1 'echo "AI Sessions: $(ps aux | grep -c ollama)"'

  - code_evolution:
      layout: main-vertical
      main-pane-width: 60%
      panes:
        - |
          cat << 'EOF' > /tmp/demo_code.py
          # Messy code that needs AI help
          def calculate_stuff(x,y,z):
              result=x+y
              if z>0:
                  for i in range(z):
                      result=result*2
              return result
          
          # TODO: This needs optimization
          def find_item(lst,item):
              for i in range(len(lst)):
                  if lst[i]==item:
                      return i
              return -1
          EOF
          nvim /tmp/demo_code.py -c "echo 'ðŸ”§ Select code and use AI to transform it!'" -c "echo 'Try: Visual select a function, then <leader>co to optimize'"
        - |
          echo "ðŸŽ¯ AI Transformation Commands"
          echo "============================="
          echo ""
          echo "1. Select the messy function"
          echo "2. Press <leader>co to optimize"
          echo "3. Watch AI refactor in real-time"
          echo ""
          echo "Other transformations:"
          echo "  â€¢ <leader>cm - Add documentation"
          echo "  â€¢ <leader>ct - Generate unit tests"
          echo "  â€¢ Convert to different languages"
          echo ""
          echo "ðŸ’¡ Pro tip: Use slash commands in chat!"
          echo "   /file - Insert current file"
          echo "   /buffer - Insert buffer content"
          echo "   /symbols - Insert code symbols"
          
  - prompt_library:
      layout: tiled
      panes:
        - nvim -c "CodeCompanion" -c "echo 'Explore the AI prompt library with <leader>ca'"
        - |
          echo "ðŸ“š Custom AI Prompts Available"
          echo "=============================="
          echo ""
          echo "â€¢ Code Review (Production-grade)"
          echo "â€¢ Performance Optimization"
          echo "â€¢ Security Audit"
          echo "â€¢ API Documentation Generator"
          echo "â€¢ Design Pattern Suggestions"
          echo "â€¢ Refactoring Assistant"
          echo "â€¢ Test Coverage Analysis"
          echo ""
          echo "ðŸ’¬ Chat with multiple AI models!"
          echo "Switch between Ollama/Claude/GPT/Copilot"