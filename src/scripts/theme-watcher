#!/usr/bin/env python3
"""
Theme watcher - monitors macOS appearance changes and auto-switches themes
Uses FSEvents to watch for preference changes efficiently
"""

import subprocess
import time
import os
from pathlib import Path
from datetime import datetime

def log(message):
    """Log message with timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}", flush=True)

def get_appearance():
    """Get current macOS appearance (light/dark)"""
    try:
        result = subprocess.run(
            ['defaults', 'read', '-g', 'AppleInterfaceStyle'],
            capture_output=True,
            text=True
        )
        return 'dark' if result.returncode == 0 and result.stdout.strip() == 'Dark' else 'light'
    except:
        return 'light'

def switch_theme():
    """Run the theme switcher script"""
    script_path = Path(__file__).parent.parent / 'theme-switcher' / 'switch-theme.sh'
    if script_path.exists():
        log(f"Switching theme via {script_path}")
        result = subprocess.run([str(script_path), 'auto'], capture_output=True, text=True)
        if result.stdout:
            log(f"Theme switch output: {result.stdout.strip()}")
        if result.stderr:
            log(f"Theme switch error: {result.stderr.strip()}")
    else:
        log(f"Theme switcher script not found at {script_path}")

def main():
    """Main monitoring loop"""
    log("Theme watcher started")
    last_appearance = get_appearance()
    log(f"Initial appearance: {last_appearance}")
    
    while True:
        current_appearance = get_appearance()
        
        if current_appearance != last_appearance:
            log(f"Appearance changed from {last_appearance} to {current_appearance}")
            switch_theme()
            last_appearance = current_appearance
        
        # Check every 2 seconds for responsiveness
        time.sleep(2)

if __name__ == '__main__':
    main()