#!/usr/bin/env zsh
# fetch-quotes - Fetch inspirational quotes from multiple sources
#
# DESCRIPTION:
#   Fetches random inspirational quotes, advice, and wisdom from public APIs.
#   Gracefully handles timeouts and API failures with automatic retries.
#   Cross-platform compatible (macOS and Linux).
#
# USAGE:
#   fetch-quotes [COUNT]
#
#   COUNT - Number of quotes to fetch (default: 5)
#
# REQUIREMENTS:
#   - curl: HTTP client for API requests
#   - jq: JSON processor for parsing API responses
#
# APIS USED:
#   - ZenQuotes: General inspirational quotes
#   - Quotable: Curated famous quotes
#   - Advice Slip: Life advice and tips
#
# EXAMPLES:
#   fetch-quotes      # Fetch 5 quotes
#   fetch-quotes 10   # Fetch 10 quotes
#
# Style Guide: https://google.github.io/styleguide/shellguide.html

# Source common library
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
source "${SCRIPT_DIR}/common.sh"

# Configuration
QUOTES_COUNT=${1:-5}
TIMEOUT_DURATION=3

# Colors are already available from common.sh

# Check for required tools
check_requirements() {
  if ! has_command curl; then
    print_color red "Error: curl is required but not installed"
    exit 1
  fi
  
  if ! has_command jq; then
    print_color red "Error: jq is required but not installed"
    echo "Install with:"
    platform_command \
      "echo '  brew install jq'" \
      "echo '  sudo apt install jq  # Debian/Ubuntu'
       echo '  sudo dnf install jq  # Fedora'
       echo '  sudo pacman -S jq    # Arch'"
    exit 1
  fi
}

# Get timeout command wrapper for API calls
# Returns timeout command if available, empty string otherwise
# This allows graceful fallback on systems without timeout (like macOS)
get_timeout_cmd() {
  if has_command timeout; then
    echo "timeout ${TIMEOUT_DURATION}"
  else
    # No timeout available - commands will run without timeout
    echo ""
  fi
}

# Fetch quotes from APIs
fetch_quotes() {
  local count=$1
  local fetched=0
  local timeout_cmd=$(get_timeout_cmd)
  
  # Try each API multiple times to ensure we get enough quotes
  while [ $fetched -lt $count ]; do
    # ZenQuotes API
    if [ $fetched -lt $count ]; then
      local quote
      # Use timeout wrapper if available, otherwise run directly
      quote=$($timeout_cmd curl -s 'https://zenquotes.io/api/random' 2>/dev/null | jq -r '.[0] | "💭 \"\(.q)\"\n   — \(.a)"' 2>/dev/null)

      if [[ -n "$quote" ]] && [[ "$quote" != "null" ]]; then
        echo -e "$quote\n"
        ((fetched++))
      fi
    fi
    
    # Quotable API
    if [ $fetched -lt $count ]; then
      local quote
      quote=$($timeout_cmd curl -s 'https://api.quotable.io/random' 2>/dev/null | jq -r '"🌟 \"\(.content)\"\n   — \(.author)"' 2>/dev/null)

      if [[ -n "$quote" ]] && [[ "$quote" != "null" ]]; then
        echo -e "$quote\n"
        ((fetched++))
      fi
    fi
    
    # Advice Slip API
    if [ $fetched -lt $count ]; then
      local quote
      quote=$($timeout_cmd curl -s 'https://api.adviceslip.com/advice' 2>/dev/null | jq -r '"💡 \(.slip.advice)"' 2>/dev/null)

      if [[ -n "$quote" ]] && [[ "$quote" != "null" ]]; then
        echo -e "$quote\n"
        ((fetched++))
      fi
    fi
    
    # If we still need more quotes, add a small delay before retrying
    if [ $fetched -lt $count ]; then
      sleep 0.5
    fi
  done
}

# Main execution
main() {
  check_requirements
  
  # Header
  echo -e "${CYAN}═══════════════════════════════════════════════════════════════════════════════${NC}"
  echo -e "${CYAN}                         ✨ Daily Inspiration ✨                               ${NC}"
  echo -e "${CYAN}═══════════════════════════════════════════════════════════════════════════════${NC}"
  echo ""
  
  # Fetch quotes
  fetch_quotes $QUOTES_COUNT
  
  echo -e "${CYAN}═══════════════════════════════════════════════════════════════════════════════${NC}"
}

main "$@"