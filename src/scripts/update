#!/bin/bash

echo "Starting system update process..."

# macOS System Updates
echo "Checking for macOS system updates..."
if softwareupdate -l 2>&1 | grep -q "No new software available"; then
    echo "No macOS system updates available."
else
    echo "macOS updates available. Use 'sudo softwareupdate -ia' to install manually."
fi

# Mac App Store Updates (requires 'mas' CLI tool)
if command -v mas &> /dev/null; then
    echo "Updating Mac App Store applications..."
    mas upgrade || echo "No Mac App Store updates or failed to install."
else
    echo "Skipping Mac App Store updates: 'mas' CLI tool not found. Install with 'brew install mas' if desired."
fi

# Homebrew Updates
echo "Updating Homebrew packages..."
brew update

# Check for deprecated packages and remove them
echo "Checking for deprecated packages..."
# Use array to prevent command injection with proper validation
mapfile -t deprecated_packages < <(brew outdated --formula 2>&1 | grep -F "has been disabled because it is deprecated" | awk '{print $2}' | grep -E '^[a-zA-Z0-9._@+-]+$')
if [[ ${#deprecated_packages[@]} -gt 0 ]]; then
    echo "Found deprecated packages: ${deprecated_packages[*]}"
    echo "Removing deprecated packages..."
    # Safely iterate through array with validated package names
    for pkg in "${deprecated_packages[@]}"; do
        # Double-check package name format before using
        if [[ "$pkg" =~ ^[a-zA-Z0-9._@+-]+$ ]]; then
            brew uninstall --ignore-dependencies -- "$pkg" || echo "Failed to remove: $pkg"
        else
            echo "Skipping invalid package name: $pkg" >&2
        fi
    done
fi

# Upgrade remaining packages
brew upgrade && brew upgrade --cask && brew cleanup || echo "Homebrew update failed."

# Neovim Plugin Updates (lazy.nvim)
echo "Updating Neovim plugins..."
nvim --headless -c "Lazy! sync" -c "qa" || echo "Neovim plugin update failed."

# Zinit Updates
echo "Updating Zinit plugins..."
zsh -ic "zinit update --all" 2>/dev/null || echo "Zinit update failed."

# Node.js Global Package Updates (npm)
if command -v npm &> /dev/null; then
    echo "Updating global npm packages..."
    npm update -g || echo "npm global package update failed."
fi

# Node.js Global Package Updates (yarn)
if command -v yarn &> /dev/null; then
    echo "Updating global Yarn packages..."
    yarn global upgrade || echo "Yarn global package update failed."
fi

# Node.js Global Package Updates (pnpm)
if command -v pnpm &> /dev/null; then
    echo "Updating global pnpm packages..."
    pnpm update -g || echo "pnpm global package update failed."
fi

# Python Package Updates (pip3)
if command -v pip3 &> /dev/null; then
    echo "Updating Python packages (pip3)..."
    pip3 install --upgrade pip setuptools wheel || echo "Failed to upgrade pip components."
    # Use array to safely handle package names with validation
    mapfile -t outdated_packages < <(pip3 list --outdated --format=json | jq -r '.[].name' | grep -E '^[a-zA-Z0-9._-]+$')
    if [[ ${#outdated_packages[@]} -gt 0 ]]; then
        for pkg in "${outdated_packages[@]}"; do
            # Validate package name format
            if [[ "$pkg" =~ ^[a-zA-Z0-9._-]+$ ]]; then
                pip3 install -U -- "$pkg" || echo "Failed to update: $pkg"
            else
                echo "Skipping invalid package name: $pkg" >&2
            fi
        done
    fi
fi

# RubyGems Updates (gem) - skip system gems to avoid permission issues
if command -v gem &> /dev/null; then
    echo "Updating RubyGems (user gems only)..."
    gem update --user-install || echo "RubyGems update failed or no user gems to update."
fi

# Rust Toolchain and Cargo Package Updates
if command -v rustup &> /dev/null; then
    echo "Updating Rust toolchain..."
    rustup update || echo "Rust toolchain update failed."
fi
if command -v cargo &> /dev/null; then
    echo "Updating global Cargo packages..."
    # This command attempts to update all globally installed cargo packages.
    # It lists them, extracts names, and tries to install them again with --force.
    # This is a common way to update them as cargo doesn't have a direct 'update all' for installed binaries.
    cargo install --list | grep -E '^[a-zA-Z0-9_-]+ v[0-9\.]+' | awk '{print $1}' | xargs -n1 cargo install --force || echo "Cargo global package update failed."
fi

# TeX Live Manager Updates (tlmgr)
if command -v tlmgr &> /dev/null; then
    echo "Checking TeX Live packages (tlmgr)..."
    tlmgr update --list 2>/dev/null | grep -q "update available" && echo "TeX Live updates available. Run 'sudo tlmgr update --all' manually." || echo "No TeX Live updates available."
fi

echo "System update process completed."