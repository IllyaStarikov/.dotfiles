#!/bin/bash
# Consolidated tmux utility functions for status bar

# Cache configuration
CACHE_DIR="/tmp"
CPU_CACHE_FILE="$CACHE_DIR/.tmux_cpu_cache"
MEM_CACHE_FILE="$CACHE_DIR/.tmux_mem_cache"
BATTERY_CACHE_FILE="$CACHE_DIR/.tmux_battery_cache"

# Function to get CPU usage percentage on macOS
get_cpu_usage() {
    local current_time=$(date +%s)

    # Check if cache exists and is less than 10 seconds old
    if [ -f "$CPU_CACHE_FILE" ]; then
        local cache_time=$(stat -f %m "$CPU_CACHE_FILE" 2>/dev/null || echo 0)
        local age=$((current_time - cache_time))

        if [ "$age" -lt 10 ]; then
            cat "$CPU_CACHE_FILE"
            return
        fi
    fi

    # Use ps to calculate CPU usage (faster than iostat)
    local cpu_sum=$(ps aux | awk 'NR>1 {sum+=$3} END {print sum}')
    local cpu_cores=$(sysctl -n hw.ncpu)
    local cpu_percent=$(echo "scale=0; $cpu_sum / $cpu_cores" | bc | cut -d. -f1)

    # Ensure it's not negative
    [ "$cpu_percent" -lt 0 ] && cpu_percent=0

    # Save to cache
    echo "$cpu_percent" > "$CPU_CACHE_FILE"
    echo "$cpu_percent"
}

# Function to get memory usage on macOS
get_memory_usage() {
    local current_time=$(date +%s)

    # Check if cache exists and is less than 5 seconds old
    if [ -f "$MEM_CACHE_FILE" ]; then
        local cache_time=$(stat -f %m "$MEM_CACHE_FILE" 2>/dev/null || echo 0)
        local age=$((current_time - cache_time))

        if [ "$age" -lt 5 ]; then
            cat "$MEM_CACHE_FILE"
            return
        fi
    fi

    # Get memory stats using vm_stat (native macOS command)
    local vm_stat=$(vm_stat)

    # Extract values with default values to handle missing fields
    local pages_free=$(echo "$vm_stat" | grep "Pages free" | awk '{print $3}' | tr -d '.' || echo "0")
    local pages_active=$(echo "$vm_stat" | grep "Pages active" | awk '{print $3}' | tr -d '.' || echo "0")
    local pages_inactive=$(echo "$vm_stat" | grep "Pages inactive" | awk '{print $3}' | tr -d '.' || echo "0")
    local pages_speculative=$(echo "$vm_stat" | grep "Pages speculative" | awk '{print $3}' | tr -d '.' || echo "0")
    local pages_wired=$(echo "$vm_stat" | grep "Pages wired down" | awk '{print $4}' | tr -d '.' || echo "0")
    local pages_compressed=$(echo "$vm_stat" | grep "Pages occupied by compressor" | awk '{print $5}' | tr -d '.' || echo "0")

    # Calculate used pages (active + wired + compressed)
    local pages_used=$((pages_active + pages_wired + pages_compressed))
    local pages_total=$((pages_free + pages_active + pages_inactive + pages_speculative + pages_wired + pages_compressed))

    # Convert to GB (page size is 16384 bytes on modern macOS)
    local memory_used_gb=$(echo "scale=0; $pages_used * 16384 / 1024 / 1024 / 1024" | bc)
    local memory_total_gb=$(echo "scale=0; $pages_total * 16384 / 1024 / 1024 / 1024" | bc)

    # Calculate percentage
    local memory_percent=$(echo "scale=0; $pages_used * 100 / $pages_total" | bc)

    # Save to cache
    echo "$memory_percent $memory_used_gb" > "$MEM_CACHE_FILE"
    echo "$memory_percent $memory_used_gb"
}

# Function to get battery status on macOS
get_battery_status() {
    local current_time=$(date +%s)

    # Check if cache exists and is less than 30 seconds old
    if [ -f "$BATTERY_CACHE_FILE" ]; then
        local cache_time=$(stat -f %m "$BATTERY_CACHE_FILE" 2>/dev/null || echo 0)
        local age=$((current_time - cache_time))

        if [ "$age" -lt 30 ]; then
            cat "$BATTERY_CACHE_FILE"
            return
        fi
    fi

    # Get battery info using pmset
    local battery_info=$(pmset -g batt | grep -E "[0-9]+%")

    if [ -z "$battery_info" ]; then
        echo "No battery"
        return
    fi

    # Extract percentage
    local battery_percent=$(echo "$battery_info" | grep -o "[0-9]\+%" | tr -d '%')

    # Choose battery icon based on percentage
    local icon
    if [ "$battery_percent" -le 24 ]; then
        icon="🪫"  # battery drain emoji for 0-24%
    else
        icon="🔋"
    fi

    # Generate bars for battery
    local bars=$(generate_bars "$battery_percent" "battery")

    # Get color for battery text with bold
    local text_color
    if [ "$battery_percent" -ge 50 ]; then
        text_color="#[fg=green,bold]"
    elif [ "$battery_percent" -ge 25 ]; then
        text_color="#[fg=yellow,bold]"
    else
        text_color="#[fg=red,bold]"
    fi

    # Format output
    local battery_output="${icon} ${bars} ${text_color}${battery_percent}%#[default]"

    # Save to cache
    echo "$battery_output" > "$BATTERY_CACHE_FILE"
    echo "$battery_output"
}

# Function to generate bar visualization with colors
generate_bars() {
    local percent=$1
    local type=$2  # "cpu_mem" or "battery"

    # Unicode box drawing characters
    local empty="□"
    local filled="■"

    # Calculate how many bars to fill (out of 4)
    local num_filled=0
    if [ "$type" = "battery" ]; then
        # Battery: different thresholds
        if [ "$percent" -le 10 ]; then
            num_filled=0
        elif [ "$percent" -le 24 ]; then
            num_filled=1
        elif [ "$percent" -le 49 ]; then
            num_filled=2
        elif [ "$percent" -le 74 ]; then
            num_filled=3
        else
            num_filled=4
        fi
    else
        # CPU/Memory: standard thresholds
        if [ "$percent" -le 24 ]; then
            num_filled=0
        elif [ "$percent" -le 49 ]; then
            num_filled=1
        elif [ "$percent" -le 74 ]; then
            num_filled=2
        elif [ "$percent" -le 89 ]; then
            num_filled=3
        else
            num_filled=4
        fi
    fi

    # Determine color based on type and fill level
    local color
    if [ "$type" = "battery" ]; then
        # Battery: 0-1 bars red, 2 bars yellow, 3-4 bars green
        if [ "$num_filled" -le 1 ]; then
            color="#[fg=red]"
        elif [ "$num_filled" -eq 2 ]; then
            color="#[fg=yellow]"
        else
            color="#[fg=green]"
        fi
    else
        # CPU/Memory: 0-1 bars green, 2 bars yellow (for CPU) or green (for memory), 3 bars yellow, 4 bars red
        if [ "$type" = "cpu_mem" ]; then
            if [ "$num_filled" -le 1 ]; then
                color="#[fg=green]"
            elif [ "$num_filled" -eq 2 ]; then
                color="#[fg=yellow]"
            elif [ "$num_filled" -eq 3 ]; then
                color="#[fg=yellow]"
            else
                color="#[fg=red]"
            fi
        else  # memory specific
            if [ "$num_filled" -le 2 ]; then
                color="#[fg=green]"
            elif [ "$num_filled" -eq 3 ]; then
                color="#[fg=yellow]"
            else
                color="#[fg=red]"
            fi
        fi
    fi

    # Build the bar string with colors
    local bars="${color}"
    for i in 1 2 3 4; do
        if [ "$i" -le "$num_filled" ]; then
            bars="${bars}${filled}"
        else
            bars="${bars}${empty}"
        fi
    done
    bars="${bars}#[default]"

    echo "$bars"
}

# Clock function with emoji
get_clock() {
    local hour=$(date +%I | sed 's/^0//')  # 12-hour format without leading zero
    local minute=$(date +%M)
    local clock

    # Determine if it's closer to the hour or half-hour
    if [ "$minute" -lt 15 ]; then
        # Use hour clock
        case "$hour" in
            1)  clock="🕐" ;;
            2)  clock="🕑" ;;
            3)  clock="🕒" ;;
            4)  clock="🕓" ;;
            5)  clock="🕔" ;;
            6)  clock="🕕" ;;
            7)  clock="🕖" ;;
            8)  clock="🕗" ;;
            9)  clock="🕘" ;;
            10) clock="🕙" ;;
            11) clock="🕚" ;;
            12) clock="🕛" ;;
            *)  clock="🕐" ;;
        esac
    elif [ "$minute" -ge 15 ] && [ "$minute" -lt 45 ]; then
        # Use half-hour clock
        case "$hour" in
            1)  clock="🕜" ;;
            2)  clock="🕝" ;;
            3)  clock="🕞" ;;
            4)  clock="🕟" ;;
            5)  clock="🕠" ;;
            6)  clock="🕡" ;;
            7)  clock="🕢" ;;
            8)  clock="🕣" ;;
            9)  clock="🕤" ;;
            10) clock="🕥" ;;
            11) clock="🕦" ;;
            12) clock="🕧" ;;
            *)  clock="🕐" ;;
        esac
    else
        # Closer to next hour, so use next hour's clock
        local next_hour=$(( (hour % 12) + 1 ))
        case "$next_hour" in
            1)  clock="🕐" ;;
            2)  clock="🕑" ;;
            3)  clock="🕒" ;;
            4)  clock="🕓" ;;
            5)  clock="🕔" ;;
            6)  clock="🕕" ;;
            7)  clock="🕖" ;;
            8)  clock="🕗" ;;
            9)  clock="🕘" ;;
            10) clock="🕙" ;;
            11) clock="🕚" ;;
            12) clock="🕛" ;;
            *)  clock="🕐" ;;
        esac
    fi

    echo "${clock} $(date +%H:%M)"
}

# Main command dispatcher
case "$1" in
    cpu)
        cpu_percent=$(get_cpu_usage)
        bars=$(generate_bars "$cpu_percent" "cpu_mem")
        # Get color for text with bold
        if [ "$cpu_percent" -le 49 ]; then
            text_color="#[fg=green,bold]"
        elif [ "$cpu_percent" -le 89 ]; then
            text_color="#[fg=yellow,bold]"
        else
            text_color="#[fg=red,bold]"
        fi
        echo "🧠 $bars ${text_color}${cpu_percent}%#[default]"
        ;;

    memory)
        read mem_percent mem_gb <<< "$(get_memory_usage)"
        bars=$(generate_bars "$mem_percent" "memory")
        # Get color for text with bold
        if [ "$mem_percent" -le 74 ]; then
            text_color="#[fg=green,bold]"
        elif [ "$mem_percent" -le 89 ]; then
            text_color="#[fg=yellow,bold]"
        else
            text_color="#[fg=red,bold]"
        fi
        echo "🐏 $bars ${text_color}${mem_gb}GB#[default]"
        ;;

    battery)
        get_battery_status
        ;;

    clock)
        get_clock
        ;;

    clock-simple)
        echo "$(date +%H:%M)"
        ;;

    *)
        echo "Usage: $0 {cpu|memory|battery|clock|clock-simple}"
        echo "  cpu         - Show CPU usage with bars and percentage"
        echo "  memory      - Show memory usage with bars and GB used"
        echo "  battery     - Show battery status with icon and percentage"
        echo "  clock       - Show time with emoji clock face"
        echo "  clock-simple - Show time in HH:MM format only"
        exit 1
        ;;
esac
