#!/bin/bash
# Consolidated tmux utility functions for status bar

# OS detection
OS_TYPE=$(uname -s)

# Cache configuration
CACHE_DIR="/tmp"
CPU_CACHE_FILE="$CACHE_DIR/.tmux_cpu_cache"
CPU_PREV_TOTAL_FILE="$CACHE_DIR/.tmux_cpu_prev_total_cache"
CPU_PREV_IDLE_FILE="$CACHE_DIR/.tmux_cpu_prev_idle_cache"
MEM_CACHE_FILE="$CACHE_DIR/.tmux_mem_cache"
BATTERY_CACHE_FILE="$CACHE_DIR/.tmux_battery_cache"

# Function to get CPU usage percentage
get_cpu_usage() {
    local current_time=$(date +%s)
    local cache_time=0

    if [ -f "$CPU_CACHE_FILE" ]; then
        if [ "$OS_TYPE" = "Linux" ]; then
            cache_time=$(stat -c %Y "$CPU_CACHE_FILE" 2>/dev/null || echo 0)
        else
            cache_time=$(stat -f %m "$CPU_CACHE_FILE" 2>/dev/null || echo 0)
        fi
        local age=$((current_time - cache_time))

        if [ "$age" -lt 10 ]; then
            cat "$CPU_CACHE_FILE"
            return
        fi
    fi

    local cpu_percent=0
    if [ "$OS_TYPE" = "Linux" ]; then
        # Read /proc/stat for CPU times
        local cpu_line=$(grep "^cpu " /proc/stat)
        local user=$(echo "$cpu_line" | awk '{print $2}')
        local nice=$(echo "$cpu_line" | awk '{print $3}')
        local system=$(echo "$cpu_line" | awk '{print $4}')
        local idle=$(echo "$cpu_line" | awk '{print $5}')
        local iowait=$(echo "$cpu_line" | awk '{print $6}')
        local irq=$(echo "$cpu_line" | awk '{print $7}')
        local softirq=$(echo "$cpu_line" | awk '{print $8}')

        local total_cpu_time=$((user + nice + system + idle + iowait + irq + softirq))
        local idle_time=$((idle + iowait))

        local prev_total=0
        local prev_idle=0
        [ -f "$CPU_PREV_TOTAL_FILE" ] && prev_total=$(cat "$CPU_PREV_TOTAL_FILE")
        [ -f "$CPU_PREV_IDLE_FILE" ] && prev_idle=$(cat "$CPU_PREV_IDLE_FILE")

        local total_diff=$((total_cpu_time - prev_total))
        local idle_diff=$((idle_time - prev_idle))

        if [ "$total_diff" -gt 0 ]; then
            cpu_percent=$((100 * (total_diff - idle_diff) / total_diff))
        fi

        echo "$total_cpu_time" > "$CPU_PREV_TOTAL_FILE"
        echo "$idle_time" > "$CPU_PREV_IDLE_FILE"
    else
        # macOS implementation
        local cpu_sum=$(ps aux | awk 'NR>1 {sum+=$3} END {print sum}')
        local cpu_cores=$(sysctl -n hw.ncpu)
        cpu_percent=$(echo "scale=0; $cpu_sum / $cpu_cores" | bc | cut -d. -f1)
    fi

    [ "$cpu_percent" -lt 0 ] && cpu_percent=0
    echo "$cpu_percent" > "$CPU_CACHE_FILE"
    echo "$cpu_percent"
}

# Function to get memory usage
get_memory_usage() {
    local current_time=$(date +%s)
    local cache_time=0

    if [ -f "$MEM_CACHE_FILE" ]; then
        if [ "$OS_TYPE" = "Linux" ]; then
            cache_time=$(stat -c %Y "$MEM_CACHE_FILE" 2>/dev/null || echo 0)
        else
            cache_time=$(stat -f %m "$MEM_CACHE_FILE" 2>/dev/null || echo 0)
        fi
        local age=$((current_time - cache_time))

        if [ "$age" -lt 5 ]; then
            cat "$MEM_CACHE_FILE"
            return
        fi
    fi

    local mem_percent=0
    local mem_gb=0
    if [ "$OS_TYPE" = "Linux" ]; then
        local mem_info=$(grep -E '^(MemTotal|MemFree|Buffers|Cached|SReclaimable)' /proc/meminfo)
        local mem_total=$(echo "$mem_info" | grep "MemTotal" | awk '{print $2}')
        local mem_free=$(echo "$mem_info" | grep "MemFree" | awk '{print $2}')
        local buffers=$(echo "$mem_info" | grep "Buffers" | awk '{print $2}')
        local cached=$(echo "$mem_info" | grep "Cached" | awk '{print $2}')
        local sreclaimable=$(echo "$mem_info" | grep "SReclaimable" | awk '{print $2}')
        
        local mem_used=$((mem_total - mem_free - buffers - cached - sreclaimable))
        mem_percent=$((mem_used * 100 / mem_total))
        mem_gb=$(echo "scale=0; $mem_used / 1024 / 1024" | bc)
    else
        # macOS implementation
        local vm_stat=$(vm_stat)
        local pages_free=$(echo "$vm_stat" | grep "Pages free" | awk '{print $3}' | tr -d '.' || echo "0")
        local pages_active=$(echo "$vm_stat" | grep "Pages active" | awk '{print $3}' | tr -d '.' || echo "0")
        local pages_inactive=$(echo "$vm_stat" | grep "Pages inactive" | awk '{print $3}' | tr -d '.' || echo "0")
        local pages_speculative=$(echo "$vm_stat" | grep "Pages speculative" | awk '{print $3}' | tr -d '.' || echo "0")
        local pages_wired=$(echo "$vm_stat" | grep "Pages wired down" | awk '{print $4}' | tr -d '.' || echo "0")
        local pages_compressed=$(echo "$vm_stat" | grep "Pages occupied by compressor" | awk '{print $5}' | tr -d '.' || echo "0")

        local pages_used=$((pages_active + pages_wired + pages_compressed))
        local pages_total=$((pages_free + pages_active + pages_inactive + pages_speculative + pages_wired + pages_compressed))

        mem_percent=$(echo "scale=0; $pages_used * 100 / $pages_total" | bc)
        mem_gb=$(echo "scale=0; $pages_used * 16384 / 1024 / 1024 / 1024" | bc)
    fi

    echo "$mem_percent $mem_gb" > "$MEM_CACHE_FILE"
    echo "$mem_percent $mem_gb"
}

# Function to get battery status
get_battery_status() {
    local current_time=$(date +%s)
    local cache_time=0

    if [ -f "$BATTERY_CACHE_FILE" ]; then
        if [ "$OS_TYPE" = "Linux" ]; then
            cache_time=$(stat -c %Y "$BATTERY_CACHE_FILE" 2>/dev/null || echo 0)
        else
            cache_time=$(stat -f %m "$BATTERY_CACHE_FILE" 2>/dev/null || echo 0)
        fi
        local age=$((current_time - cache_time))

        if [ "$age" -lt 30 ]; then
            cat "$BATTERY_CACHE_FILE"
            return
        fi
    fi

    local battery_percent=0
    local battery_info=""
    if [ "$OS_TYPE" = "Linux" ]; then
        local battery_dir=$(find /sys/class/power_supply -name 'BAT*' | head -n 1)
        if [ -n "$battery_dir" ]; then
            battery_percent=$(cat "$battery_dir/capacity")
        fi
    else
        # macOS implementation
        battery_info=$(pmset -g batt | grep -E "[0-9]+%")
        if [ -n "$battery_info" ]; then
            battery_percent=$(echo "$battery_info" | grep -o "[0-9]\+%" | tr -d '%')
        fi
    fi

    if [ -z "$battery_info" ] && [ "$OS_TYPE" != "Linux" ]; then
        echo "No battery"
        return
    fi
    
    if [ -z "$battery_percent" ]; then
        echo "No battery"
        return
    fi

    local icon
    if [ "$battery_percent" -le 24 ]; then
        icon="ü™´"
    else
        icon="üîã"
    fi

    local bars=$(generate_bars "$battery_percent" "battery")
    local text_color
    if [ "$battery_percent" -ge 50 ]; then
        text_color="#[fg=green,bold]"
    elif [ "$battery_percent" -ge 25 ]; then
        text_color="#[fg=yellow,bold]"
    else
        text_color="#[fg=red,bold]"
    fi

    local battery_output="${icon} ${bars} ${text_color}${battery_percent}%#[default]"
    echo "$battery_output" > "$BATTERY_CACHE_FILE"
    echo "$battery_output"
}

# Function to generate bar visualization with colors
generate_bars() {
    local percent=$1
    local type=$2  # "cpu_mem" or "battery"

    # Unicode box drawing characters
    local empty="‚ñ°"
    local filled="‚ñ†"

    # Calculate how many bars to fill (out of 4)
    local num_filled=0
    if [ "$type" = "battery" ]; then
        # Battery: different thresholds
        if [ "$percent" -le 10 ]; then
            num_filled=0
        elif [ "$percent" -le 24 ]; then
            num_filled=1
        elif [ "$percent" -le 49 ]; then
            num_filled=2
        elif [ "$percent" -le 74 ]; then
            num_filled=3
        else
            num_filled=4
        fi
    else
        # CPU/Memory: standard thresholds
        if [ "$percent" -le 24 ]; then
            num_filled=0
        elif [ "$percent" -le 49 ]; then
            num_filled=1
        elif [ "$percent" -le 74 ]; then
            num_filled=2
        elif [ "$percent" -le 89 ]; then
            num_filled=3
        else
            num_filled=4
        fi
    fi

    # Determine color based on type and fill level
    local color
    if [ "$type" = "battery" ]; then
        # Battery: 0-1 bars red, 2 bars yellow, 3-4 bars green
        if [ "$num_filled" -le 1 ]; then
            color="#[fg=red]"
        elif [ "$num_filled" -eq 2 ]; then
            color="#[fg=yellow]"
        else
            color="#[fg=green]"
        fi
    else
        # CPU/Memory: 0-1 bars green, 2 bars yellow (for CPU) or green (for memory), 3 bars yellow, 4 bars red
        if [ "$type" = "cpu_mem" ]; then
            if [ "$num_filled" -le 1 ]; then
                color="#[fg=green]"
            elif [ "$num_filled" -eq 2 ]; then
                color="#[fg=yellow]"
            elif [ "$num_filled" -eq 3 ]; then
                color="#[fg=yellow]"
            else
                color="#[fg=red]"
            fi
        else  # memory specific
            if [ "$num_filled" -le 2 ]; then
                color="#[fg=green]"
            elif [ "$num_filled" -eq 3 ]; then
                color="#[fg=yellow]"
            else
                color="#[fg=red]"
            fi
        fi
    fi

    # Build the bar string with colors
    local bars="${color}"
    for i in 1 2 3 4; do
        if [ "$i" -le "$num_filled" ]; then
            bars="${bars}${filled}"
        else
            bars="${bars}${empty}"
        fi
    done
    bars="${bars}#[default]"

    echo "$bars"
}

# Clock function with emoji
get_clock() {
    local hour=$(date +%I | sed 's/^0//')  # 12-hour format without leading zero
    local minute=$(date +%M)
    local clock

    # Determine if it's closer to the hour or half-hour
    if [ "$minute" -lt 15 ]; then
        # Use hour clock
        case "$hour" in
            1)  clock="üïê" ;;
            2)  clock="üïë" ;;
            3)  clock="üïí" ;;
            4)  clock="üïì" ;;
            5)  clock="üïî" ;;
            6)  clock="üïï" ;;
            7)  clock="üïñ" ;;
            8)  clock="üïó" ;;
            9)  clock="üïò" ;;
            10) clock="üïô" ;;
            11) clock="üïö" ;;
            12) clock="üïõ" ;;
            *)  clock="üïê" ;;
        esac
    elif [ "$minute" -ge 15 ] && [ "$minute" -lt 45 ]; then
        # Use half-hour clock
        case "$hour" in
            1)  clock="üïú" ;;
            2)  clock="üïù" ;;
            3)  clock="üïû" ;;
            4)  clock="üïü" ;;
            5)  clock="üï†" ;;
            6)  clock="üï°" ;;
            7)  clock="üï¢" ;;
            8)  clock="üï£" ;;
            9)  clock="üï§" ;;
            10) clock="üï•" ;;
            11) clock="üï¶" ;;
            12) clock="üïß" ;;
            *)  clock="üïê" ;;
        esac
    else
        # Closer to next hour, so use next hour's clock
        local next_hour=$(( (hour % 12) + 1 ))
        case "$next_hour" in
            1)  clock="üïê" ;;
            2)  clock="üïë" ;;
            3)  clock="üïí" ;;
            4)  clock="üïì" ;;
            5)  clock="üïî" ;;
            6)  clock="üïï" ;;
            7)  clock="üïñ" ;;
            8)  clock="üïó" ;;
            9)  clock="üïò" ;;
            10) clock="üïô" ;;
            11) clock="üïö" ;;
            12) clock="üïõ" ;;
            *)  clock="üïê" ;;
        esac
    fi

    echo "${clock} $(date +%H:%M)"
}

# Main command dispatcher
case "$1" in
    cpu)
        cpu_percent=$(get_cpu_usage)
        bars=$(generate_bars "$cpu_percent" "cpu_mem")
        # Get color for text with bold
        if [ "$cpu_percent" -le 49 ]; then
            text_color="#[fg=green,bold]"
        elif [ "$cpu_percent" -le 89 ]; then
            text_color="#[fg=yellow,bold]"
        else
            text_color="#[fg=red,bold]"
        fi
        echo "üß† $bars ${text_color}${cpu_percent}%#[default]"
        ;;

    memory)
        read mem_percent mem_gb <<< "$(get_memory_usage)"
        bars=$(generate_bars "$mem_percent" "memory")
        # Get color for text with bold
        if [ "$mem_percent" -le 74 ]; then
            text_color="#[fg=green,bold]"
        elif [ "$mem_percent" -le 89 ]; then
            text_color="#[fg=yellow,bold]"
        else
            text_color="#[fg=red,bold]"
        fi
        echo "üêè $bars ${text_color}${mem_gb}GB#[default]"
        ;;

    battery)
        get_battery_status
        ;;

    clock)
        get_clock
        ;;

    clock-simple)
        echo "$(date +%H:%M)"
        ;;

    *)
        echo "Usage: $0 {cpu|memory|battery|clock|clock-simple}"
        echo "  cpu         - Show CPU usage with bars and percentage"
        echo "  memory      - Show memory usage with bars and GB used"
        echo "  battery     - Show battery status with icon and percentage"
        echo "  clock       - Show time with emoji clock face"
        echo "  clock-simple - Show time in HH:MM format only"
        exit 1
        ;;
esac
