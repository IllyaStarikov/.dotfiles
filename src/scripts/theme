#!/bin/bash
# Unified theme management script for macOS
# Handles theme switching across Alacritty, tmux, and shell

set -euo pipefail

# Script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THEME_SWITCHER_DIR="$(dirname "$SCRIPT_DIR")/theme-switcher"

# Configuration directories
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/theme-switcher"
ALACRITTY_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/alacritty"
TMUX_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/tmux"
STARSHIP_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
WEZTERM_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/wezterm"
KITTY_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/kitty"

# Default themes
LIGHT_THEME="${THEME_LIGHT:-tokyonight_day}"
DARK_THEME="${THEME_DARK:-tokyonight_storm}"

# Ensure directories exist
mkdir -p "$CONFIG_DIR" "$ALACRITTY_DIR" "$TMUX_DIR" "$WEZTERM_DIR" "$KITTY_DIR"

# Function to detect macOS appearance
detect_macos_appearance() {
    local appearance=$(defaults read -g AppleInterfaceStyle 2>/dev/null || echo "Light")
    if [[ "$appearance" == "Dark" ]]; then
        echo "dark"
    else
        echo "light"
    fi
}

# Function to get current theme
get_current_theme() {
    if [[ -f "$CONFIG_DIR/current-theme.sh" ]]; then
        source "$CONFIG_DIR/current-theme.sh"
        echo "${MACOS_THEME:-}"
    fi
}

# Function to list available themes
list_themes() {
    echo "Available themes:"
    echo ""
    echo "TokyoNight themes:"
    for theme in "$THEME_SWITCHER_DIR/themes"/tokyonight_*; do
        if [[ -d "$theme" ]]; then
            local name=$(basename "$theme")
            local variant="dark"
            [[ "$name" =~ day ]] && variant="light"
            echo "  $name ($variant)"
        fi
    done
    echo ""
    echo "Shortcuts:"
    echo "  light  - Use default light theme (tokyonight_day)"
    echo "  dark   - Use default dark theme (tokyonight_storm)"
    echo "  day    - tokyonight_day (light)"
    echo "  night  - tokyonight_night (dark)"
    echo "  moon   - tokyonight_moon (dark)"
    echo "  storm  - tokyonight_storm (dark)"
}

# Function to apply theme
apply_theme() {
    local theme="$1"
    local variant="$2"
    local theme_dir="$THEME_SWITCHER_DIR/themes/$theme"
    
    if [[ ! -d "$theme_dir" ]]; then
        echo "Error: Theme '$theme' not found"
        return 1
    fi
    
    echo "Applying theme: $theme ($variant mode)"
    
    # Update Alacritty
    if [[ -f "$theme_dir/alacritty.toml" ]] || [[ -f "$theme_dir/alacritty/theme.toml" ]]; then
        local alacritty_theme=""
        if [[ -f "$theme_dir/alacritty/theme.toml" ]]; then
            alacritty_theme="$theme_dir/alacritty/theme.toml"
        else
            alacritty_theme="$theme_dir/alacritty.toml"
        fi
        
        cp "$alacritty_theme" "$ALACRITTY_DIR/theme.toml"
        # Touch config to trigger live reload
        touch "$ALACRITTY_DIR/alacritty.toml" 2>/dev/null || true
        touch "$ALACRITTY_DIR/theme.toml" 2>/dev/null || true
        echo "  ✓ Alacritty theme updated"
    fi
    
    # Update tmux
    if [[ -f "$theme_dir/tmux.conf" ]]; then
        cp "$theme_dir/tmux.conf" "$TMUX_DIR/theme.conf"
        
        # Force reload tmux configuration
        if command -v tmux &>/dev/null && tmux info &>/dev/null; then
            # First source the main config
            tmux source-file ~/.tmux.conf 2>/dev/null || true
            
            # If we're inside tmux, also use run-shell to ensure it propagates
            if [[ -n "${TMUX:-}" ]]; then
                tmux run-shell "tmux source-file ~/.tmux.conf" 2>/dev/null || true
            fi
            
            # Force refresh all clients
            sleep 0.1  # Give tmux a moment to process the source command
            tmux list-clients -F '#{client_name}' 2>/dev/null | while read -r client; do
                tmux refresh-client -t "$client" -S 2>/dev/null || true
            done
            
            echo "  ✓ Tmux theme updated and reloaded"
        fi
    fi
    
    # Update Starship
    if [[ -f "$theme_dir/starship.toml" ]]; then
        cp "$theme_dir/starship.toml" "$STARSHIP_DIR/starship-theme.toml"
        echo "  ✓ Starship theme updated"
    fi
    
    # Update WezTerm
    local wezterm_theme_file="$WEZTERM_DIR/theme.lua"
    cat > "$wezterm_theme_file" << EOF
-- Auto-generated WezTerm theme configuration
-- Theme: $theme
-- Generated: $(date)

-- Load the theme module from dotfiles
local home = os.getenv("HOME")
package.path = package.path .. ";" .. home .. "/.dotfiles/src/wezterm/themes/?.lua"
local theme = require('$theme')

-- Return the theme for use in wezterm.lua
return theme
EOF
    chmod 644 "$wezterm_theme_file"
    echo "  ✓ WezTerm theme updated"
    
    # Update Kitty
    if [[ -f "$theme_dir/kitty.conf" ]]; then
        cp "$theme_dir/kitty.conf" "$KITTY_DIR/theme.conf"
        # Reload Kitty configuration if it's running
        if pgrep -x "kitty" > /dev/null; then
            # Find Kitty socket and reload config
            local kitty_socket=$(ls /tmp/kitty-* 2>/dev/null | head -1)
            if [[ -n "$kitty_socket" ]]; then
                kitty @ --to unix:"$kitty_socket" load-config 2>/dev/null || true
            else
                # Fallback: try without socket specification
                kitty @ load-config 2>/dev/null || true
            fi
        fi
        echo "  ✓ Kitty theme updated"
    fi
    
    # Save theme state - this is what zsh sources on startup
    cat > "$CONFIG_DIR/current-theme.sh" << EOF
# Current theme configuration
export MACOS_THEME="$theme"
export MACOS_VARIANT="$variant"
EOF
    chmod 644 "$CONFIG_DIR/current-theme.sh"
    
    # Source it in current shell if in zsh
    if [[ -n "${ZSH_VERSION:-}" ]]; then
        source "$CONFIG_DIR/current-theme.sh"
    fi
    
    echo "✅ Theme switched to: $theme"
}

# Main command handling
case "${1:-}" in
    # Help options
    -h|--help|help)
        cat << EOF
Usage: theme [COMMAND|THEME]

Theme Manager - Switch terminal themes across Alacritty, tmux, and shell

COMMANDS:
    detect              Auto-detect macOS appearance and apply theme
    current             Show current theme
    list                List all available themes
    help                Show this help message

THEMES:
    light               Use default light theme (tokyonight_day)
    dark                Use default dark theme (tokyonight_storm)
    
    Shortcuts:
    day                 tokyonight_day (light)
    night               tokyonight_night (dark)
    moon                tokyonight_moon (dark)
    storm               tokyonight_storm (dark)

EXAMPLES:
    theme dark          Switch to default dark theme
    theme moon          Switch to TokyoNight Moon theme
    theme detect        Auto-detect theme from macOS appearance
    theme current       Show current theme

EOF
        exit 0
        ;;
    
    # Commands
    detect)
        appearance=$(detect_macos_appearance)
        if [[ "$appearance" == "dark" ]]; then
            theme="$DARK_THEME"
        else
            theme="$LIGHT_THEME"
        fi
        echo "Detected macOS appearance: $appearance"
        apply_theme "$theme" "$appearance"
        ;;
    
    current)
        current=$(get_current_theme)
        if [[ -n "$current" ]]; then
            source "$CONFIG_DIR/current-theme.sh"
            echo "Current theme: $current (${MACOS_VARIANT:-unknown} mode)"
        else
            echo "No theme currently set. Run 'theme detect' to auto-detect."
        fi
        ;;
    
    list)
        list_themes
        ;;
    
    # No argument - detect and apply
    "")
        exec "$0" detect
        ;;
    
    # Theme shortcuts and names
    *)
        # Map shortcuts to full theme names
        theme="$1"
        variant="dark"  # default
        
        case "$theme" in
            light)
                theme="$LIGHT_THEME"
                variant="light"
                ;;
            dark)
                theme="$DARK_THEME"
                variant="dark"
                ;;
            day)
                theme="tokyonight_day"
                variant="light"
                ;;
            night)
                theme="tokyonight_night"
                variant="dark"
                ;;
            moon)
                theme="tokyonight_moon"
                variant="dark"
                ;;
            storm)
                theme="tokyonight_storm"
                variant="dark"
                ;;
            *)
                # Detect variant from theme name
                if [[ "$theme" =~ (day|light)$ ]]; then
                    variant="light"
                fi
                ;;
        esac
        
        # Apply the theme
        apply_theme "$theme" "$variant"
        ;;
esac