#!/bin/bash
# Consolidated theme management script for macOS
# Handles theme switching and environment detection

set -euo pipefail

# Script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THEME_SWITCHER_DIR="$(dirname "$SCRIPT_DIR")/theme-switcher"

# Configuration directories
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/theme-switcher"
ALACRITTY_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/alacritty"
TMUX_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/tmux"
STARSHIP_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"

# Default themes
LIGHT_THEME="${THEME_LIGHT:-tokyonight_day}"
DARK_THEME="${THEME_DARK:-tokyonight_storm}"

# Ensure directories exist
mkdir -p "$CONFIG_DIR" "$ALACRITTY_DIR" "$TMUX_DIR"

# Function to detect macOS appearance
detect_macos_appearance() {
    local appearance=$(defaults read -g AppleInterfaceStyle 2>/dev/null || echo "Light")
    if [[ "$appearance" == "Dark" ]]; then
        echo "dark"
    else
        echo "light"
    fi
}

# Function to get current theme
get_current_theme() {
    if [[ -f "$CONFIG_DIR/current-theme.sh" ]]; then
        source "$CONFIG_DIR/current-theme.sh"
        echo "${MACOS_THEME:-}"
    fi
}

# Function to detect theme from macOS and set environment
detect_and_set_theme() {
    local appearance=$(detect_macos_appearance)
    local theme
    
    if [[ "$appearance" == "dark" ]]; then
        theme="$DARK_THEME"
    else
        theme="$LIGHT_THEME"
    fi
    
    # Save theme state
    cat > "$CONFIG_DIR/current-theme.sh" << EOF
#!/bin/bash
# Current theme configuration
export MACOS_THEME="$theme"
export MACOS_APPEARANCE="$appearance"
EOF
    
    echo "$theme"
}

# Function to list available themes
list_themes() {
    echo "Available themes:"
    echo ""
    echo "TokyoNight themes:"
    for theme in "$THEME_SWITCHER_DIR/themes"/tokyonight_*; do
        if [[ -d "$theme" ]]; then
            local name=$(basename "$theme")
            local variant="dark"
            [[ "$name" =~ day ]] && variant="light"
            echo "  $name ($variant)"
        fi
    done
    echo ""
    echo "Shortcuts:"
    echo "  light  - Use default light theme (tokyonight_day)"
    echo "  dark   - Use default dark theme (tokyonight_storm)"
    echo "  day    - tokyonight_day (light)"
    echo "  night  - tokyonight_night (dark)"
    echo "  moon   - tokyonight_moon (dark)"
    echo "  storm  - tokyonight_storm (dark)"
}

# Function to apply theme
apply_theme() {
    local theme="$1"
    local variant="$2"
    local theme_dir="$THEME_SWITCHER_DIR/themes/$theme"
    
    if [[ ! -d "$theme_dir" ]]; then
        echo "Error: Theme '$theme' not found"
        return 1
    fi
    
    echo "Applying theme: $theme ($variant mode)"
    
    # Update Alacritty
    if [[ -f "$theme_dir/alacritty.toml" ]]; then
        cp "$theme_dir/alacritty.toml" "$ALACRITTY_DIR/theme.toml"
        # Touch both theme and main config to trigger reload
        touch "$ALACRITTY_DIR/theme.toml" 2>/dev/null || true
        touch "$ALACRITTY_DIR/alacritty.toml" 2>/dev/null || true
        # Give Alacritty a moment to detect the change
        sleep 0.1
        echo "  Alacritty theme updated (may require window focus change to refresh)"
    fi
    
    # Update tmux
    if [[ -f "$theme_dir/tmux.conf" ]]; then
        cp "$theme_dir/tmux.conf" "$TMUX_DIR/theme.conf"
        # Reload tmux if running
        if command -v tmux &> /dev/null && tmux info &> /dev/null; then
            tmux source-file ~/.tmux.conf 2>/dev/null || true
            # Refresh all clients
            tmux list-clients -F '#{client_name}' 2>/dev/null | while read -r client; do
                tmux refresh-client -t "$client" -S 2>/dev/null || true
            done
        fi
    fi
    
    # Update Starship
    if [[ -f "$theme_dir/starship.toml" ]]; then
        cp "$theme_dir/starship.toml" "$STARSHIP_DIR/starship-theme.toml"
    fi
    
    # Save theme state
    cat > "$CONFIG_DIR/current-theme.sh" << EOF
#!/bin/bash
# Current theme configuration
export MACOS_THEME="$theme"
export MACOS_APPEARANCE="$variant"
EOF
    
    echo "✅ Theme switched to: $theme"
}

# Function to reload Alacritty
reload_alacritty() {
    # Touch config to trigger live reload
    touch "$ALACRITTY_DIR/alacritty.toml" 2>/dev/null || touch ~/.alacritty.toml 2>/dev/null
    echo "✅ Alacritty config touched for reload"
}

# Main command handling
case "${1:-}" in
    # Help options
    -h|--help|help)
        cat << EOF
Usage: theme [COMMAND|THEME]

Theme Manager - Switch terminal themes across Alacritty, tmux, and Starship

COMMANDS:
    detect              Detect current macOS appearance and set theme
    current             Show current theme
    list                List all available themes
    reload              Reload Alacritty configuration
    help                Show this help message

THEMES:
    light               Use default light theme (tokyonight_day)
    dark                Use default dark theme (tokyonight_storm)
    
    Shortcuts:
    day                 tokyonight_day (light)
    night               tokyonight_night (dark)
    moon                tokyonight_moon (dark)
    storm               tokyonight_storm (dark)
    
    Full theme names:
    tokyonight_day, tokyonight_night, tokyonight_moon, tokyonight_storm

EXAMPLES:
    theme dark          Switch to default dark theme
    theme moon          Switch to TokyoNight Moon theme
    theme detect        Auto-detect theme from macOS appearance
    theme current       Show current theme

EOF
        exit 0
        ;;
    
    # Commands
    detect)
        theme=$(detect_and_set_theme)
        echo "Detected macOS appearance: $(detect_macos_appearance)"
        echo "Set theme to: $theme"
        # Apply the detected theme
        variant=$(detect_macos_appearance)
        apply_theme "$theme" "$variant"
        ;;
    
    current)
        current=$(get_current_theme)
        if [[ -n "$current" ]]; then
            variant="dark"
            [[ "$current" =~ day ]] && variant="light"
            echo "Current theme: ${current##tokyonight_} ($variant mode)"
        else
            echo "No theme currently set. Run 'theme detect' to auto-detect."
        fi
        ;;
    
    list)
        list_themes
        ;;
    
    reload)
        reload_alacritty
        ;;
    
    # No argument - show current theme
    "")
        exec "$0" current
        ;;
    
    # Theme shortcuts and names
    *)
        # Map shortcuts to full theme names
        theme="$1"
        variant="dark"  # default
        
        case "$theme" in
            light)
                theme="$LIGHT_THEME"
                variant="light"
                ;;
            dark)
                theme="$DARK_THEME"
                variant="dark"
                ;;
            day)
                theme="tokyonight_day"
                variant="light"
                ;;
            night)
                theme="tokyonight_night"
                variant="dark"
                ;;
            moon)
                theme="tokyonight_moon"
                variant="dark"
                ;;
            storm)
                theme="tokyonight_storm"
                variant="dark"
                ;;
            *)
                # Detect variant from theme name
                if [[ "$theme" =~ (day|light)$ ]]; then
                    variant="light"
                fi
                ;;
        esac
        
        # Apply the theme
        apply_theme "$theme" "$variant"
        ;;
esac