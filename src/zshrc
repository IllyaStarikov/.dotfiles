# Modern Zsh Configuration - Minimal, Fast, and Powerful
# No Oh My Zsh, No bloat, Just what you need

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Core Settings
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Essential options
setopt AUTO_CD              # cd by typing directory name
setopt INTERACTIVE_COMMENTS # Allow comments in interactive mode
setopt HIST_IGNORE_DUPS     # Don't record duplicate commands
setopt SHARE_HISTORY        # Share history between sessions
setopt HIST_REDUCE_BLANKS   # Remove blanks from history
setopt CORRECT              # Command correction
setopt NO_BEEP              # No beeping
setopt GLOB_DOTS            # Include dotfiles in globbing

# History
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000

# Performance: Skip global compinit (we'll do it once)
skip_global_compinit=1

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Zinit - Modern Plugin Manager
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Install zinit if not present
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -d "$ZINIT_HOME" ]]; then
    print -P "%F{33}▓▒░ Installing zinit...%f"
    command mkdir -p "$(dirname $ZINIT_HOME)"
    command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi
source "${ZINIT_HOME}/zinit.zsh"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Essential Plugins Only
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Fast syntax highlighting (turbo mode for speed)
zinit wait lucid for \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting

# Autosuggestions (turbo mode)
zinit wait lucid atload"!_zsh_autosuggest_start" for \
    zsh-users/zsh-autosuggestions

# Better directory navigation
zinit ice wait"0" lucid
zinit light agkozak/zsh-z

# Essential completions
zinit ice wait"0" lucid blockf
zinit light zsh-users/zsh-completions

# Git aliases (minimal, not the full oh-my-zsh plugin)
zinit snippet OMZ::lib/git.zsh
zinit wait lucid for \
    OMZ::plugins/git/git.plugin.zsh

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Environment Setup
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Homebrew (only if not in PATH)
if [[ ":$PATH:" != *":/opt/homebrew/bin:"* ]]; then
    [[ -x "/opt/homebrew/bin/brew" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Editor
export EDITOR=nvim
export VISUAL=nvim

# Language
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Less options
export LESS='-R -S -M -i'

# FZF configuration
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border --color=dark'
if command -v fd &>/dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
else
    export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/\.git/*"'
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Key Bindings
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Vi mode
bindkey -v
export KEYTIMEOUT=1

# Better searching
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# Edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# Common shortcuts
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^K' kill-line
bindkey '^W' backward-kill-word

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Completion System
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Initialize completion system
autoload -Uz compinit
if [[ -n ${ZDOTDIR:-$HOME}/.zcompdump(#qNmh+24) ]]; then
    compinit
else
    compinit -C
fi

# Completion options
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Aliases - Only the Essential Ones
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Source comprehensive aliases file
[[ -f "$HOME/.dotfiles/src/zsh/aliases.zsh" ]] && source "$HOME/.dotfiles/src/zsh/aliases.zsh"

# Core shortcuts (with command checks)
command -v eza &>/dev/null && alias l='eza -la --group-directories-first' || alias l='ls -la'
command -v eza &>/dev/null && alias ls='eza --group-directories-first'
command -v eza &>/dev/null && alias tree='eza --tree' || alias tree='tree'
command -v bat &>/dev/null && alias cat='bat'
command -v rg &>/dev/null && alias grep='rg'
command -v fd &>/dev/null && alias find='fd'

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Git essentials (provided by git plugin)
# alias g='git'
# alias gs='git status'
# alias gd='git diff'
# alias gc='git commit'
# alias gp='git push'
# alias gl='git pull'

# Safety
alias rm='trash'  # Move files to trash instead of permanent deletion
alias cp='cp -i'
alias mv='mv -i'

# Quick edits
alias zshrc='$EDITOR ~/.zshrc'
alias vimrc='$EDITOR ~/.config/nvim/init.lua'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Functions - Only What We Actually Use
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Make directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Quick server
serve() {
    local port=${1:-8000}
    python3 -m http.server $port
}

# Extract archives
extract() {
    if [[ -f "$1" ]]; then
        case "$1" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz)  tar xzf "$1" ;;
            *.tar.xz)  tar xJf "$1" ;;
            *.bz2)     bunzip2 "$1" ;;
            *.rar)     unrar x "$1" ;;
            *.gz)      gunzip "$1" ;;
            *.tar)     tar xf "$1" ;;
            *.tbz2)    tar xjf "$1" ;;
            *.tgz)     tar xzf "$1" ;;
            *.zip)     unzip "$1" ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1" ;;
            *) echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Development Tools
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# fnm - Fast Node Manager (replacing nvm)
if command -v fnm &>/dev/null; then
    eval "$(fnm env --use-on-cd)"
fi

# pyenv
if command -v pyenv &>/dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

# Rust
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# Add dotfiles scripts to PATH
export PATH="$HOME/.dotfiles/src/scripts:$HOME/.dotfiles/src/setup:$PATH"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Starship Prompt
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Local Overrides
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[[ -f "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"

# Load work configs securely
if [[ -d "$HOME/.dotfiles/.dotfiles.private" ]]; then
    local work_config="$HOME/.dotfiles/.dotfiles.private/work-aliases.zsh"
    if [[ -f "$work_config" ]] && [[ -O "$work_config" ]]; then
        source "$work_config"
    fi
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# FZF Integration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

# Theme integration
[[ -f "$HOME/.config/theme-switcher/current-theme.sh" ]] && source "$HOME/.config/theme-switcher/current-theme.sh"

# Theme switching function with proper reload
# Unset the alias first if it exists
unalias theme 2>/dev/null || true

theme() {
    local theme="${1:-}"
    
    if [[ -z "$theme" ]]; then
        # Show current theme if no argument
        if [[ -f "$HOME/.config/theme-switcher/current-theme.sh" ]]; then
            source "$HOME/.config/theme-switcher/current-theme.sh"
            echo "Current theme: $(echo $MACOS_THEME | sed 's/tokyonight_//') ($MACOS_VARIANT mode)"
        else
            echo "No theme set. Use: theme dark/light/moon/storm/day"
        fi
        return
    fi
    
    # Run the theme switcher
    ~/.dotfiles/src/theme-switcher/switch-theme.sh "$theme"
    
    # Reload theme environment variables
    source "$HOME/.config/theme-switcher/current-theme.sh"
    
    # Reload tmux for ALL sessions (not just current)
    if command -v tmux &>/dev/null; then
        # Get list of all tmux sessions
        local tmux_sessions=$(tmux list-sessions -F '#S' 2>/dev/null || true)
        
        if [[ -n "$tmux_sessions" ]]; then
            # Reload config in all sessions
            while IFS= read -r session; do
                tmux source-file ~/.tmux.conf \; \
                     refresh-client -t "$session" -S 2>/dev/null || true
            done <<< "$tmux_sessions"
        fi
    fi
    
    # Note: Alacritty will need to be restarted to see theme changes
    # since live_config_reload is disabled to prevent crashes
    echo "✅ Theme switched to: $(echo $MACOS_THEME | sed 's/tokyonight_//')"
}

# Remove duplicates from PATH
typeset -U PATH path