--
-- Markdown snippets - Professional documentation templates
-- Comprehensive snippets for technical documentation, design docs, and more
--

local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local sn = ls.snippet_node

-- Helper functions
local function get_date()
  return os.date("%Y-%m-%d")
end

local function get_author()
  return vim.fn.system("git config user.name"):gsub("\n", "") or "Author Name"
end

local function get_email()
  return vim.fn.system("git config user.email"):gsub("\n", "") or "email@example.com"
end

return {
  -- Comprehensive Design Document Template
  s("design_doc", {
    t({"# Design Document: "}), i(1, "Feature Name"),
    t({""}), t({""}),
    t({"**Author**: "}), f(get_author, {}), t({" <"}), f(get_email, {}), t({">  "}),
    t({"**Date**: "}), f(get_date, {}), t({"  "}),
    t({"**Status**: "}), c(2, {t("Draft"), t("In Review"), t("Approved"), t("Implemented")}),
    t({""}), t({""}),
    t({"## Executive Summary"}),
    t({""}),
    t({"> **TL;DR**: "}), i(3, "One paragraph summary of the entire design"),
    t({""}), t({""}),
    t({"## Background and Context"}),
    t({""}),
    t({"### Problem Statement"}),
    t({""}), i(4, "What problem are we solving? Why does it matter?"),
    t({""}), t({""}),
    t({"### Current State"}),
    t({""}), i(5, "How do things work today? What are the pain points?"),
    t({""}), t({""}),
    t({"### Goals and Non-Goals"}),
    t({""}),
    t({"**Goals:**"}),
    t({"- "}), i(6, "Primary objective 1"),
    t({"- "}), i(7, "Primary objective 2"),
    t({"- "}), i(8, "Primary objective 3"),
    t({""}),
    t({"**Non-Goals:**"}),
    t({"- "}), i(9, "What this design explicitly does NOT address"),
    t({"- "}), i(10, "Future considerations out of scope"),
    t({""}), t({""}),
    t({"## Proposed Solution"}),
    t({""}),
    t({"### High-Level Approach"}),
    t({""}), i(11, "Describe the solution in 2-3 paragraphs"),
    t({""}), t({""}),
    t({"### Technical Architecture"}),
    t({""}),
    t({"```mermaid"}),
    t({"graph TB"}),
    t({"    A["}), i(12, "Component A"), t({"] --> B["}), i(13, "Component B"), t({"]"}),
    t({"    B --> C["}), i(14, "Component C"), t({"]"}),
    t({"    B --> D["}), i(15, "Component D"), t({"]"}),
    t({"```"}),
    t({""}), t({""}),
    t({"### API Design"}),
    t({""}),
    t({"```"}), i(16, "python"),
    t({"class "}), i(17, "MainInterface"), t({":"}),
    t({"    def "}), i(18, "primary_method"), t({"(self, "}), i(19, "param: str"), t({") -> "}), i(20, "Result"), t({":"}),
    t({"        \"\"\""}), i(21, "Method description"), t({"\"\"\""}),
    t({"        pass"}),
    t({"```"}),
    t({""}), t({""}),
    t({"### Data Model"}),
    t({""}),
    t({"| Field | Type | Description | Constraints |"}),
    t({"|-------|------|-------------|-------------|"}),
    t({"| "}), i(22, "id"), t({" | "}), i(23, "UUID"), t({" | "}), i(24, "Unique identifier"), t({" | "}), i(25, "Primary key"), t({" |"}),
    t({"| "}), i(26, "name"), t({" | "}), i(27, "string"), t({" | "}), i(28, "Display name"), t({" | "}), i(29, "Required, max 255"), t({" |"}),
    t({""}), t({""}),
    t({"## Implementation Plan"}),
    t({""}),
    t({"### Phase 1: "}), i(30, "Foundation"), t({" ("}), i(31, "2 weeks"), t({")"}),
    t({"- [ ] "}), i(32, "Task 1"),
    t({"- [ ] "}), i(33, "Task 2"),
    t({""}),
    t({"### Phase 2: "}), i(34, "Core Features"), t({" ("}), i(35, "3 weeks"), t({")"}),
    t({"- [ ] "}), i(36, "Task 3"),
    t({"- [ ] "}), i(37, "Task 4"),
    t({""}),
    t({"### Phase 3: "}), i(38, "Polish & Deploy"), t({" ("}), i(39, "1 week"), t({")"}),
    t({"- [ ] "}), i(40, "Task 5"),
    t({"- [ ] "}), i(41, "Task 6"),
    t({""}), t({""}),
    t({"## Testing Strategy"}),
    t({""}),
    t({"### Unit Tests"}),
    t({"- "}), i(42, "Component-level testing approach"),
    t({""}),
    t({"### Integration Tests"}),
    t({"- "}), i(43, "System-wide testing approach"),
    t({""}),
    t({"### Performance Tests"}),
    t({"- "}), i(44, "Load testing and benchmarks"),
    t({""}), t({""}),
    t({"## Security Considerations"}),
    t({""}),
    t({"- **Authentication**: "}), i(45, "How users are authenticated"),
    t({"- **Authorization**: "}), i(46, "Access control mechanisms"),
    t({"- **Data Protection**: "}), i(47, "Encryption and privacy measures"),
    t({""}), t({""}),
    t({"## Rollout Plan"}),
    t({""}),
    t({"1. **Canary Release**: "}), i(48, "5% of traffic"),
    t({"2. **Gradual Rollout**: "}), i(49, "25%, 50%, 100%"),
    t({"3. **Monitoring**: "}), i(50, "Key metrics to track"),
    t({"4. **Rollback Plan**: "}), i(51, "How to revert if issues arise"),
    t({""}), t({""}),
    t({"## Alternatives Considered"}),
    t({""}),
    t({"### Option A: "}), i(52, "Alternative approach"),
    t({"**Pros**: "}), i(53, "Benefits"),
    t({"**Cons**: "}), i(54, "Drawbacks"),
    t({"**Decision**: "}), i(55, "Why rejected"),
    t({""}), t({""}),
    t({"## Open Questions"}),
    t({""}),
    t({"- [ ] "}), i(56, "Unresolved question 1"),
    t({"- [ ] "}), i(57, "Unresolved question 2"),
    t({""}), t({""}),
    t({"## References"}),
    t({""}),
    t({"- ["}), i(58, "Link Title"), t({"]("}), i(59, "URL"), t({")"}),
    t({"- ["}), i(60, "Related Design Doc"), t({"]("}), i(61, "URL"), t({")"}),
    i(0)
  }),

  -- Professional README Template
  s("readme", {
    t({"<div align=\"center\">"}),
    t({""}),
    t({"# üöÄ "}), i(1, "Project Name"),
    t({""}),
    t({"[![License](https://img.shields.io/badge/license-"}), i(2, "MIT"), t({"-blue.svg)](LICENSE)"}),
    t({"[![Build Status](https://github.com/"}), i(3, "username/repo"), t({"/workflows/CI/badge.svg)](https://github.com/"}), f(function(args) return args[1][1] end, {3}), t({"/actions)"}),
    t({"[![Coverage](https://codecov.io/gh/"}), f(function(args) return args[1][1] end, {3}), t({"/branch/main/graph/badge.svg)](https://codecov.io/gh/"}), f(function(args) return args[1][1] end, {3}), t({")"}),
    t({""}),
    t({"> "}), i(4, "One-line description of your project"),
    t({""}),
    t({"</div>"}),
    t({""}), t({""}),
    t({"## üìã Table of Contents"}),
    t({""}),
    t({"- [Features](#features)"}),
    t({"- [Installation](#installation)"}),
    t({"- [Quick Start](#quick-start)"}),
    t({"- [Usage](#usage)"}),
    t({"- [API Reference](#api-reference)"}),
    t({"- [Development](#development)"}),
    t({"- [Contributing](#contributing)"}),
    t({"- [License](#license)"}),
    t({""}), t({""}),
    t({"## ‚ú® Features"}),
    t({""}),
    t({"- üéØ **"}), i(5, "Feature 1"), t({"**: "}), i(6, "Description"),
    t({"- ‚ö° **"}), i(7, "Feature 2"), t({"**: "}), i(8, "Description"),
    t({"- üîí **"}), i(9, "Feature 3"), t({"**: "}), i(10, "Description"),
    t({"- üìä **"}), i(11, "Feature 4"), t({"**: "}), i(12, "Description"),
    t({""}), t({""}),
    t({"## üöÄ Installation"}),
    t({""}),
    t({"### Prerequisites"}),
    t({""}),
    t({"- "}), i(13, "Python 3.8+"),
    t({"- "}), i(14, "pip"),
    t({""}),
    t({"### Using pip"}),
    t({""}),
    t({"```bash"}),
    t({"pip install "}), i(15, "package-name"),
    t({"```"}),
    t({""}),
    t({"### From source"}),
    t({""}),
    t({"```bash"}),
    t({"git clone https://github.com/"}), f(function(args) return args[1][1] end, {3}), t({".git"}),
    t({"cd "}), i(16, "project-name"),
    t({"pip install -e ."}),
    t({"```"}),
    t({""}), t({""}),
    t({"## üéØ Quick Start"}),
    t({""}),
    t({"```python"}),
    t({"import "}), i(17, "package_name"),
    t({""}),
    t({"# "}), i(18, "Simple example"),
    i(19, "result = package_name.do_something()"),
    t({"print(result)"}),
    t({"```"}),
    t({""}), t({""}),
    t({"## üìñ Usage"}),
    t({""}),
    t({"### Basic Example"}),
    t({""}),
    t({"```python"}),
    i(20, "# More detailed usage example"),
    t({"```"}),
    t({""}),
    t({"### Advanced Example"}),
    t({""}),
    t({"```python"}),
    i(21, "# Complex usage scenario"),
    t({"```"}),
    t({""}), t({""}),
    t({"## üìö API Reference"}),
    t({""}),
    t({"### `"}), i(22, "main_function"), t({"`"}),
    t({""}),
    t({"```python"}),
    t({"def "}), f(function(args) return args[1][1] end, {22}), t({"("}), i(23, "param: str"), t({") -> "}), i(24, "str"), t({":"}),
    t({"    \"\"\""}),
    t({"    "}), i(25, "Function description"),
    t({"    "}),
    t({"    Args:"}),
    t({"        param: "}), i(26, "Parameter description"),
    t({"    "}),
    t({"    Returns:"}),
    t({"        "}), i(27, "Return value description"),
    t({"    \"\"\""}),
    t({"```"}),
    t({""}), t({""}),
    t({"## üõ†Ô∏è Development"}),
    t({""}),
    t({"### Setup Development Environment"}),
    t({""}),
    t({"```bash"}),
    t({"# Clone the repository"}),
    t({"git clone https://github.com/"}), f(function(args) return args[1][1] end, {3}), t({".git"}),
    t({"cd "}), f(function(args) return args[1][1] end, {16}),
    t({""}),
    t({"# Create virtual environment"}),
    t({"python -m venv venv"}),
    t({"source venv/bin/activate  # On Windows: venv\\Scripts\\activate"}),
    t({""}),
    t({"# Install development dependencies"}),
    t({"pip install -e \".[dev]\""}),
    t({"```"}),
    t({""}),
    t({"### Running Tests"}),
    t({""}),
    t({"```bash"}),
    t({"# Run all tests"}),
    t({"pytest"}),
    t({""}),
    t({"# Run with coverage"}),
    t({"pytest --cov="}), i(28, "package_name"),
    t({""}),
    t({"# Run specific test"}),
    t({"pytest tests/test_"}), i(29, "module"), t({".py"}),
    t({"```"}),
    t({""}),
    t({"### Code Style"}),
    t({""}),
    t({"```bash"}),
    t({"# Format code"}),
    t({"black ."}),
    t({""}),
    t({"# Lint code"}),
    t({"flake8"}),
    t({""}),
    t({"# Type checking"}),
    t({"mypy "}), f(function(args) return args[1][1] end, {28}),
    t({"```"}),
    t({""}), t({""}),
    t({"## ü§ù Contributing"}),
    t({""}),
    t({"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details."}),
    t({""}),
    t({"1. Fork the repository"}),
    t({"2. Create your feature branch (`git checkout -b feature/amazing-feature`)"}),
    t({"3. Commit your changes (`git commit -m 'Add amazing feature'`)"}),
    t({"4. Push to the branch (`git push origin feature/amazing-feature`)"}),
    t({"5. Open a Pull Request"}),
    t({""}), t({""}),
    t({"## üìÑ License"}),
    t({""}),
    t({"This project is licensed under the "}), f(function(args) return args[1][1] end, {2}), t({" License - see the [LICENSE](LICENSE) file for details."}),
    t({""}), t({""}),
    t({"## üôè Acknowledgments"}),
    t({""}),
    t({"- "}), i(30, "Thanks to contributors"),
    t({"- "}), i(31, "Inspired by project X"),
    t({""}), t({""}),
    t({"---"}),
    t({""}),
    t({"<div align=\"center\">"}),
    t({"Made with ‚ù§Ô∏è by "}), f(get_author, {}),
    t({"</div>"}),
    i(0)
  }),

  -- API Documentation Template
  s("api_doc", {
    t({"# API Documentation"}),
    t({""}), t({""}),
    t({"## Base URL"}),
    t({"```"}),
    i(1, "https://api.example.com/v1"),
    t({"```"}),
    t({""}), t({""}),
    t({"## Authentication"}),
    t({""}),
    t({"All API requests require authentication using an API key in the header:"}),
    t({""}),
    t({"```bash"}),
    t({"curl -H \"Authorization: Bearer YOUR_API_KEY\" \\"}),
    t({"     "}), f(function(args) return args[1][1] end, {1}), t({"/endpoint"}),
    t({"```"}),
    t({""}), t({""}),
    t({"## Rate Limiting"}),
    t({""}),
    t({"- **Rate Limit**: "}), i(2, "1000 requests per hour"),
    t({"- **Rate Limit Header**: `X-RateLimit-Limit`"}),
    t({"- **Remaining Requests**: `X-RateLimit-Remaining`"}),
    t({"- **Reset Time**: `X-RateLimit-Reset`"}),
    t({""}), t({""}),
    t({"## Endpoints"}),
    t({""}), t({""}),
    t({"### "}), i(3, "Get Resource"),
    t({""}),
    t({"```http"}),
    i(4, "GET"), t({" /"}), i(5, "resources"), t({"/"}), i(6, "{id}"),
    t({"```"}),
    t({""}),
    t({"#### Parameters"}),
    t({""}),
    t({"| Name | Type | In | Description | Required |"}),
    t({"|------|------|-----|-------------|----------|"}),
    t({"| "}), i(7, "id"), t({" | "}), i(8, "string"), t({" | "}), i(9, "path"), t({" | "}), i(10, "Resource identifier"), t({" | "}), i(11, "Yes"), t({" |"}),
    t({""}),
    t({"#### Response"}),
    t({""}),
    t({"```json"}),
    t({"{"}),
    t({"  \"id\": \""}), i(12, "123"), t({"\","}),
    t({"  \"name\": \""}), i(13, "Resource Name"), t({"\","}),
    t({"  \"created_at\": \""}), i(14, "2024-01-01T00:00:00Z"), t({"\","}),
    t({"  \"data\": "}), i(15, "{}"),
    t({"}"}),
    t({"```"}),
    t({""}),
    t({"#### Error Responses"}),
    t({""}),
    t({"| Status Code | Description |"}),
    t({"|-------------|-------------|"}),
    t({"| 400 | Bad Request - Invalid parameters |"}),
    t({"| 401 | Unauthorized - Invalid API key |"}),
    t({"| 404 | Not Found - Resource doesn't exist |"}),
    t({"| 429 | Too Many Requests - Rate limit exceeded |"}),
    t({"| 500 | Internal Server Error |"}),
    t({""}),
    t({"#### Example"}),
    t({""}),
    t({"```bash"}),
    t({"curl -X "}), f(function(args) return args[1][1] end, {4}), t({" \\"}),
    t({"  -H \"Authorization: Bearer YOUR_API_KEY\" \\"}),
    t({"  -H \"Content-Type: application/json\" \\"}),
    t({"  "}), f(function(args) return args[1][1] end, {1}), t({"/"}), f(function(args) return args[1][1] end, {5}), t({"/123"}),
    t({"```"}),
    i(0)
  }),

  -- Pull Request Template
  s("pr_template", {
    t({"## Description"}),
    t({""}),
    i(1, "Brief description of what this PR does"),
    t({""}), t({""}),
    t({"## Type of Change"}),
    t({""}),
    t({"- [ ] üêõ Bug fix (non-breaking change which fixes an issue)"}),
    t({"- [ ] ‚ú® New feature (non-breaking change which adds functionality)"}),
    t({"- [ ] üí• Breaking change (fix or feature that would cause existing functionality to not work as expected)"}),
    t({"- [ ] üìö Documentation update"}),
    t({"- [ ] üé® Style update (formatting, renaming)"}),
    t({"- [ ] ‚ôªÔ∏è Code refactor (no functional changes)"}),
    t({"- [ ] ‚ö° Performance improvements"}),
    t({"- [ ] ‚úÖ Test update"}),
    t({"- [ ] ü§ñ Build configuration update"}),
    t({""}), t({""}),
    t({"## Related Issues"}),
    t({""}),
    t({"Closes #"}), i(2, "issue_number"),
    t({""}), t({""}),
    t({"## How Has This Been Tested?"}),
    t({""}),
    t({"- [ ] Unit tests"}),
    t({"- [ ] Integration tests"}),
    t({"- [ ] Manual testing"}),
    t({""}),
    t({"**Test Configuration**:"}),
    t({"- OS: "}), i(3, "macOS 14.0"),
    t({"- Python version: "}), i(4, "3.11"),
    t({"- Additional context: "}), i(5, "Any relevant details"),
    t({""}), t({""}),
    t({"## Screenshots (if appropriate)"}),
    t({""}),
    i(6, "Add screenshots here"),
    t({""}), t({""}),
    t({"## Checklist"}),
    t({""}),
    t({"- [ ] My code follows the style guidelines of this project"}),
    t({"- [ ] I have performed a self-review of my own code"}),
    t({"- [ ] I have commented my code, particularly in hard-to-understand areas"}),
    t({"- [ ] I have made corresponding changes to the documentation"}),
    t({"- [ ] My changes generate no new warnings"}),
    t({"- [ ] I have added tests that prove my fix is effective or that my feature works"}),
    t({"- [ ] New and existing unit tests pass locally with my changes"}),
    t({"- [ ] Any dependent changes have been merged and published"}),
    i(0)
  }),

  -- Meeting Notes Template
  s("meeting", {
    t({"# Meeting Notes: "}), i(1, "Meeting Title"),
    t({""}), t({""}),
    t({"**Date**: "}), f(get_date, {}), t({"  "}),
    t({"**Time**: "}), i(2, "10:00 AM - 11:00 AM PST"), t({"  "}),
    t({"**Location**: "}), i(3, "Zoom / Room 123"), t({"  "}),
    t({""}), t({""}),
    t({"## Attendees"}),
    t({""}),
    t({"- "}), f(get_author, {}), t({" (Organizer)"}),
    t({"- "}), i(4, "Attendee 1"),
    t({"- "}), i(5, "Attendee 2"),
    t({"- "}), i(6, "Attendee 3"),
    t({""}), t({""}),
    t({"## Agenda"}),
    t({""}),
    t({"1. "}), i(7, "Topic 1"), t({" ("}), i(8, "10 min"), t({")"}),
    t({"2. "}), i(9, "Topic 2"), t({" ("}), i(10, "20 min"), t({")"}),
    t({"3. "}), i(11, "Topic 3"), t({" ("}), i(12, "15 min"), t({")"}),
    t({"4. "}), i(13, "Next Steps"), t({" ("}), i(14, "10 min"), t({")"}),
    t({"5. Q&A (5 min)"}),
    t({""}), t({""}),
    t({"## Discussion"}),
    t({""}),
    t({"### "}), f(function(args) return args[1][1] end, {7}),
    t({""}),
    i(15, "Key points discussed"),
    t({""}),
    t({"### "}), f(function(args) return args[1][1] end, {9}),
    t({""}),
    i(16, "Key points discussed"),
    t({""}),
    t({"### "}), f(function(args) return args[1][1] end, {11}),
    t({""}),
    i(17, "Key points discussed"),
    t({""}), t({""}),
    t({"## Decisions Made"}),
    t({""}),
    t({"1. **Decision**: "}), i(18, "What was decided"),
    t({"   - **Rationale**: "}), i(19, "Why this decision"),
    t({"   - **Owner**: "}), i(20, "Who is responsible"),
    t({""}), t({""}),
    t({"## Action Items"}),
    t({""}),
    t({"| Action | Owner | Due Date | Status |"}),
    t({"|--------|-------|----------|--------|"}),
    t({"| "}), i(21, "Action 1"), t({" | "}), i(22, "Owner"), t({" | "}), i(23, "2024-01-15"), t({" | "}), c(24, {t("Not Started"), t("In Progress"), t("Completed")}), t({" |"}),
    t({"| "}), i(25, "Action 2"), t({" | "}), i(26, "Owner"), t({" | "}), i(27, "2024-01-20"), t({" | "}), c(28, {t("Not Started"), t("In Progress"), t("Completed")}), t({" |"}),
    t({""}), t({""}),
    t({"## Next Meeting"}),
    t({""}),
    t({"**Date**: "}), i(29, "TBD"), t({"  "}),
    t({"**Topics**: "}), i(30, "Follow-up on action items"),
    t({""}), t({""}),
    t({"## Notes"}),
    t({""}),
    i(31, "Additional notes or context"),
    i(0)
  }),

  -- Technical Blog Post Template
  s("blog", {
    t({"---"}),
    t({"title: \""}), i(1, "Blog Post Title"), t({"\""}),
    t({"date: "}), f(get_date, {}),
    t({"author: "}), f(get_author, {}),
    t({"tags: ["}), i(2, "python, tutorial, best-practices"), t({"]"}),
    t({"description: \""}), i(3, "Brief description for SEO"), t({"\""}),
    t({"canonical_url: "}), i(4, "https://yourblog.com/posts/this-post"),
    t({"cover_image: "}), i(5, "/images/cover.jpg"),
    t({"---"}),
    t({""}), t({""}),
    t({"# "}), f(function(args) return args[1][1] end, {1}),
    t({""}), t({""}),
    t({"## Introduction"}),
    t({""}),
    i(6, "Hook the reader with an interesting opening that explains why they should care about this topic."),
    t({""}), t({""}),
    t({"## The Problem"}),
    t({""}),
    i(7, "Describe the problem or challenge that motivated this post."),
    t({""}), t({""}),
    t({"## The Solution"}),
    t({""}),
    t({"### Step 1: "}), i(8, "First Step"),
    t({""}),
    i(9, "Explain the first step with code examples:"),
    t({""}),
    t({"```"}), i(10, "python"),
    i(11, "# Code example"),
    t({"```"}),
    t({""}),
    t({"### Step 2: "}), i(12, "Second Step"),
    t({""}),
    i(13, "Continue with the next step..."),
    t({""}), t({""}),
    t({"## Real-World Example"}),
    t({""}),
    i(14, "Provide a complete, practical example that readers can use."),
    t({""}), t({""}),
    t({"## Performance Considerations"}),
    t({""}),
    i(15, "Discuss any performance implications or benchmarks."),
    t({""}), t({""}),
    t({"## Common Pitfalls"}),
    t({""}),
    t({"1. **Pitfall 1**: "}), i(16, "Description and how to avoid"),
    t({"2. **Pitfall 2**: "}), i(17, "Description and how to avoid"),
    t({""}), t({""}),
    t({"## Conclusion"}),
    t({""}),
    i(18, "Summarize the key takeaways and encourage the reader to try it out."),
    t({""}), t({""}),
    t({"## Resources"}),
    t({""}),
    t({"- ["}), i(19, "Official Documentation"), t({"]("}), i(20, "URL"), t({")"}),
    t({"- ["}), i(21, "Related Article"), t({"]("}), i(22, "URL"), t({")"}),
    t({""}), t({""}),
    t({"---"}),
    t({""}),
    t({"*Did you find this helpful? Follow me on [Twitter]("}), i(23, "https://twitter.com/yourhandle"), t({") for more "}), i(24, "Python"), t({" tips!*"}),
    i(0)
  }),

  -- Project Roadmap Template
  s("roadmap", {
    t({"# Project Roadmap"}),
    t({""}), t({""}),
    t({"## Vision"}),
    t({""}),
    i(1, "Long-term vision for the project"),
    t({""}), t({""}),
    t({"## Current Status"}),
    t({""}),
    t({"üöÄ **Version**: "}), i(2, "1.0.0"), t({"  "}),
    t({"üìÖ **Last Updated**: "}), f(get_date, {}), t({"  "}),
    t({""}), t({""}),
    t({"## Milestones"}),
    t({""}), t({""}),
    t({"### ‚úÖ Completed"}),
    t({""}),
    t({"#### v"}), i(3, "0.1.0"), t({" - "}), i(4, "MVP"), t({" ("}), i(5, "Q1 2024"), t({")"}),
    t({"- [x] "}), i(6, "Core functionality"),
    t({"- [x] "}), i(7, "Basic documentation"),
    t({"- [x] "}), i(8, "Initial tests"),
    t({""}), t({""}),
    t({"### üöß In Progress"}),
    t({""}),
    t({"#### v"}), i(9, "1.1.0"), t({" - "}), i(10, "Enhanced Features"), t({" ("}), i(11, "Q2 2024"), t({")"}),
    t({"- [ ] "}), i(12, "Feature A"), t({" ("}), i(13, "@owner"), t({")"}),
    t({"  - [x] Design completed"}),
    t({"  - [ ] Implementation"}),
    t({"  - [ ] Testing"}),
    t({"- [ ] "}), i(14, "Feature B"), t({" ("}), i(15, "@owner"), t({")"}),
    t({""}), t({""}),
    t({"### üìã Planned"}),
    t({""}),
    t({"#### v"}), i(16, "2.0.0"), t({" - "}), i(17, "Major Update"), t({" ("}), i(18, "Q3 2024"), t({")"}),
    t({"- [ ] "}), i(19, "Breaking changes"),
    t({"- [ ] "}), i(20, "New architecture"),
    t({"- [ ] "}), i(21, "Performance improvements"),
    t({""}),
    t({"#### v"}), i(22, "2.1.0"), t({" - "}), i(23, "Polish"), t({" ("}), i(24, "Q4 2024"), t({")"}),
    t({"- [ ] "}), i(25, "UI improvements"),
    t({"- [ ] "}), i(26, "Documentation update"),
    t({""}), t({""}),
    t({"### üí° Future Ideas"}),
    t({""}),
    t({"- "}), i(27, "Idea 1"),
    t({"- "}), i(28, "Idea 2"),
    t({"- "}), i(29, "Idea 3"),
    t({""}), t({""}),
    t({"## Release Process"}),
    t({""}),
    t({"1. Feature freeze 2 weeks before release"}),
    t({"2. Release candidate testing"}),
    t({"3. Documentation update"}),
    t({"4. Version bump and tag"}),
    t({"5. Deploy to production"}),
    t({"6. Announcement"}),
    t({""}), t({""}),
    t({"## Contributing"}),
    t({""}),
    t({"Want to contribute? Check out our [Contributing Guide](CONTRIBUTING.md) and pick an issue from the roadmap!"}),
    i(0)
  }),

  -- Code Review Checklist
  s("review", {
    t({"# Code Review Checklist"}),
    t({""}), t({""}),
    t({"**PR**: #"}), i(1, "PR_NUMBER"), t({"  "}),
    t({"**Author**: "}), i(2, "@author"), t({"  "}),
    t({"**Reviewer**: "}), f(get_author, {}), t({"  "}),
    t({"**Date**: "}), f(get_date, {}), t({"  "}),
    t({""}), t({""}),
    t({"## Functionality"}),
    t({"- [ ] Code accomplishes the intended goal"}),
    t({"- [ ] Edge cases are handled"}),
    t({"- [ ] No regression in existing functionality"}),
    t({""}),
    t({"## Code Quality"}),
    t({"- [ ] Code follows project style guidelines"}),
    t({"- [ ] No code duplication"}),
    t({"- [ ] Functions/classes have single responsibility"}),
    t({"- [ ] Naming is clear and consistent"}),
    t({"- [ ] No commented-out code"}),
    t({""}),
    t({"## Testing"}),
    t({"- [ ] Unit tests cover new functionality"}),
    t({"- [ ] Tests are meaningful (not just coverage)"}),
    t({"- [ ] Edge cases are tested"}),
    t({"- [ ] All tests pass"}),
    t({""}),
    t({"## Documentation"}),
    t({"- [ ] Public APIs are documented"}),
    t({"- [ ] Complex logic has comments"}),
    t({"- [ ] README updated if needed"}),
    t({"- [ ] Changelog updated"}),
    t({""}),
    t({"## Performance"}),
    t({"- [ ] No obvious performance issues"}),
    t({"- [ ] Database queries are optimized"}),
    t({"- [ ] No memory leaks"}),
    t({""}),
    t({"## Security"}),
    t({"- [ ] Input validation is proper"}),
    t({"- [ ] No hardcoded secrets"}),
    t({"- [ ] SQL injection prevented"}),
    t({"- [ ] XSS prevented"}),
    t({""}), t({""}),
    t({"## Comments"}),
    t({""}),
    i(3, "Overall feedback and specific comments"),
    t({""}), t({""}),
    t({"## Verdict"}),
    t({""}),
    c(4, {
      t("‚úÖ **Approved** - Ready to merge"),
      t("‚úÖ **Approved with minor comments** - Fix before merging"),
      t("üîÑ **Request changes** - Address comments and re-review"),
    }),
    i(0)
  }),

  -- Simple snippets for common markdown elements
  s("link", {
    t({"["}), i(1, "text"), t({"]("}), i(2, "url"), t({")"}), i(0)
  }),

  s("img", {
    t({"!["}), i(1, "alt text"), t({"]("}), i(2, "image_url"), t({" \""}), i(3, "title"), t({"\")"}), i(0)
  }),

  s("code", {
    t({"```"}), i(1, "language"),
    t({""}), i(2, "code"),
    t({"```"}), i(0)
  }),

  s("task", {
    t({"- [ ] "}), i(1, "task description"), i(0)
  }),

  s("table", {
    t({"| "}), i(1, "Header 1"), t({" | "}), i(2, "Header 2"), t({" | "}), i(3, "Header 3"), t({" |"}),
    t({"|"}), t(string.rep("-", 10)), t({"|"}), t(string.rep("-", 10)), t({"|"}), t(string.rep("-", 10)), t({"|"}),
    t({"| "}), i(4, "Cell 1"), t({" | "}), i(5, "Cell 2"), t({" | "}), i(6, "Cell 3"), t({" |"}),
    i(0)
  }),

  s("details", {
    t({"<details>"}),
    t({"<summary>"}), i(1, "Summary"), t({"</summary>"}),
    t({""}), t({""}),
    i(2, "Hidden content"),
    t({""}), t({""}),
    t({"</details>"}),
    i(0)
  }),

  s("badge", {
    t({"[!["}), i(1, "Badge Name"), t({"]("}), i(2, "badge_url"), t({")]("}), i(3, "link_url"), t({")"}),
    i(0)
  }),
}