--
-- Java snippets - Google Java Style Guide compliant templates
-- Following https://google.github.io/styleguide/javaguide.html
--

local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node

-- Helper functions following Google naming conventions
local function get_filename()
  return vim.fn.expand('%:t') or 'Untitled.java'
end

local function get_classname()
  local filename = vim.fn.expand('%:t:r') or 'Untitled'
  -- Convert to PascalCase (Google style for classes)
  return filename:gsub("^%l", string.upper):gsub("_(%l)", string.upper):gsub("_", "")
end

local function get_package_name()
  local path = vim.fn.expand('%:p:h')
  -- Extract package from path - this is a simplified version
  local project_root = vim.fn.expand('%:p:h:h:h') -- Assume 3 levels up
  local relative_path = path:gsub(project_root .. "/", ""):gsub("src/main/java/", "")
  return relative_path:gsub("/", "."):lower()
end

local function get_date()
  return os.date('%Y-%m-%d')
end

local function get_year()
  return os.date('%Y')
end

return {
  -- Complete Java file skeleton with main method
  s("skeleton", {
    t({"/*"}),
    t({" * Copyright "}), f(get_year, {}), t({" Illya Starikov"}),
    t({" *"}),
    t({" * Licensed under the Apache License, Version 2.0 (the \"License\");"}),
    t({" * you may not use this file except in compliance with the License."}),
    t({" * You may obtain a copy of the License at"}),
    t({" *"}),
    t({" *     http://www.apache.org/licenses/LICENSE-2.0"}),
    t({" *"}),
    t({" * Unless required by applicable law or agreed to in writing, software"}),
    t({" * distributed under the License is distributed on an \"AS IS\" BASIS,"}),
    t({" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}),
    t({" * See the License for the specific language governing permissions and"}),
    t({" * limitations under the License."}),
    t({" */"}),
    t({""}),
    t({"package "}), f(get_package_name, {}), t({";"}),
    t({""}),
    t({"import java.util.logging.Logger;"}),
    t({"import java.util.logging.Level;"}),
    t({""}),
    t({"/**"}),
    t({" * "}), i(1, "Main application class"),
    t({" *"}),
    t({" * <p>"}), i(2, "Brief description of what this application does"),
    t({" * "}), i(3, "and its primary purpose."),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public final class "}), f(get_classname, {}), t({" {"}),
    t({""}),
    t({"  private static final Logger logger = Logger.getLogger("}), f(get_classname, {}), t({".class.getName());"}),
    t({""}),
    t({"  // Prevent instantiation"}),
    t({"  private "}), f(get_classname, {}), t({"() {}"}),
    t({""}),
    t({"  /**"}),
    t({"   * Main entry point for the application."}),
    t({"   *"}),
    t({"   * @param args Command line arguments"}),
    t({"   */"}),
    t({"  public static void main(String[] args) {"}),
    t({"    try {"}),
    t({"      logger.info(\"Starting application\");"}),
    t({"      "}), i(4, "// Application logic here"),
    t({"      System.out.println(\"Hello, World!\");"},),
    t({"      logger.info(\"Application completed successfully\");"}),
    t({"    } catch (Exception e) {"}),
    t({"      logger.log(Level.SEVERE, \"Application failed\", e);"}),
    t({"      System.exit(1);"}),
    t({"    }"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Google-style file header with copyright
  s("header", {
    t({"/*"}),
    t({" * Copyright "}), f(get_year, {}), t({" Illya Starikov"}),
    t({" *"}),
    t({" * Licensed under the Apache License, Version 2.0 (the \"License\");"}),
    t({" * you may not use this file except in compliance with the License."}),
    t({" * You may obtain a copy of the License at"}),
    t({" *"}),
    t({" *     http://www.apache.org/licenses/LICENSE-2.0"}),
    t({" *"}),
    t({" * Unless required by applicable law or agreed to in writing, software"}),
    t({" * distributed under the License is distributed on an \"AS IS\" BASIS,"}),
    t({" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}),
    t({" * See the License for the specific language governing permissions and"}),
    t({" * limitations under the License."}),
    t({" */"}),
    t({""}),
    t({"/**"}),
    t({" * "}), i(1, "Brief description of the file's purpose"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of what this file contains and its role"),
    t({" * "}), i(3, "in the overall system architecture."),
    t({" *"}),
    t({" * @author Illya Starikov ("}), i(4, "email@example.com"), t({")"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({""}),
    i(0)
  }),

  -- Google-style main class with comprehensive structure
  s("main", {
    t({"package "}), f(get_package_name, {}), t({";"}),
    t({""}),
    t({"import com.google.common.base.Preconditions;"}),
    t({"import com.google.common.collect.ImmutableList;"}),
    t({"import java.util.logging.Logger;"}),
    t({"import java.util.logging.Level;"}),
    t({""}),
    t({"/**"}),
    t({" * "}), i(1, "Main application class"),
    t({" *"}),
    t({" * <p>This class serves as the entry point for the application and"}),
    t({" * "}), i(2, "coordinates the main application workflow."),
    t({" *"}),
    t({" * <p>Example usage:"}),
    t({" * <pre>{@code"}),
    t({" * "}), f(get_classname, {}), t({".main(new String[]{\"--input\", \"data.txt\"});"}),
    t({" * }</pre>"}),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public final class "}), f(get_classname, {}), t({" {"}),
    t({""}),
    t({"  private static final Logger logger = Logger.getLogger("}), f(get_classname, {}), t({".class.getName());"}),
    t({""}),
    t({"  // Prevent instantiation"}),
    t({"  private "}), f(get_classname, {}), t({"() {}"}),
    t({""}),
    t({"  /**"}),
    t({"   * Main entry point for the application."}),
    t({"   *"}),
    t({"   * @param args Command line arguments"}),
    t({"   */"}),
    t({"  public static void main(String[] args) {"}),
    t({"    Preconditions.checkNotNull(args, \"Arguments cannot be null\");"}),
    t({"    "}),
    t({"    try {"}),
    t({"      logger.info(\"Starting application with \" + args.length + \" arguments\");"}),
    t({"      "}), i(3, "// Application logic here"),
    t({"      "}), i(4, "System.out.println(\"Hello, World!\");"),
    t({"      logger.info(\"Application completed successfully\");"}),
    t({"    } catch (Exception e) {"}),
    t({"      logger.log(Level.SEVERE, \"Application failed with error\", e);"}),
    t({"      System.exit(1);"}),
    t({"    }"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Google-style class with comprehensive documentation and immutability
  s("class", {
    t({"/**"}),
    t({" * "}), i(1, "Represents a domain object or service class"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of the class purpose, its responsibilities,"),
    t({" * "}), i(3, "and how it fits into the overall system design."),
    t({" *"}),
    t({" * <p>This class is immutable and thread-safe."}),
    t({" *"}),
    t({" * <p>Example usage:"}),
    t({" * <pre>{@code"}),
    t({" * "}), f(get_classname, {}), t({" "}), i(4, "instance"), t({" = "}), f(get_classname, {}), t({".builder()"}),
    t({" *     ."}), i(5, "setName"), t({"(\"example\")"}),
    t({" *     ."}), i(6, "setValue"), t({"(42)"}),
    t({" *     .build();"}),
    t({" * System.out.println("}), f(function(args) return args[1][1] end, {4}), t({"."}), i(7, "getName"), t({"());"}),
    t({" * }</pre>"}),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public final class "}), f(get_classname, {}), t({" {"}),
    t({""}),
    t({"  private final "}), i(8, "String"), t({" "}), i(9, "name"), t({";"}),
    t({"  private final "}), i(10, "int"), t({" "}), i(11, "value"), t({";"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new instance with the specified parameters."}),
    t({"   *"}),
    t({"   * @param "}), f(function(args) return args[1][1] end, {9}), t({" "}), i(12, "the name to set, cannot be null or empty"),
    t({"   * @param "}), f(function(args) return args[1][1] end, {11}), t({" "}), i(13, "the value to set, must be non-negative"),
    t({"   * @throws IllegalArgumentException if parameters are invalid"}),
    t({"   */"}),
    t({"  private "}), f(get_classname, {}), t({"("}), f(function(args) return args[1][1] end, {8}), t({" "}), f(function(args) return args[1][1] end, {9}), t({", "}), f(function(args) return args[1][1] end, {10}), t({" "}), f(function(args) return args[1][1] end, {11}), t({") {"}),
    t({"    this."}), f(function(args) return args[1][1] end, {9}), t({" = Preconditions.checkNotNull("}), f(function(args) return args[1][1] end, {9}), t({", \"Name cannot be null\");"}),
    t({"    Preconditions.checkArgument(!"}), f(function(args) return args[1][1] end, {9}), t({".trim().isEmpty(), \"Name cannot be empty\");"}),
    t({"    Preconditions.checkArgument("}), f(function(args) return args[1][1] end, {11}), t({" >= 0, \"Value must be non-negative\");"}),
    t({"    this."}), f(function(args) return args[1][1] end, {11}), t({" = "}), f(function(args) return args[1][1] end, {11}), t({";"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns the "}), f(function(args) return args[1][1] end, {9}), t({"."}),
    t({"   *"}),
    t({"   * @return the "}), f(function(args) return args[1][1] end, {9}), t({", never null or empty"}),
    t({"   */"}),
    t({"  public "}), f(function(args) return args[1][1] end, {8}), t({" "}), f(function(args) return "get" .. args[1][1]:gsub("^%l", string.upper) end, {9}), t({"() {"}),
    t({"    return "}), f(function(args) return args[1][1] end, {9}), t({";"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns the "}), f(function(args) return args[1][1] end, {11}), t({"."}),
    t({"   *"}),
    t({"   * @return the "}), f(function(args) return args[1][1] end, {11}), t({", always non-negative"}),
    t({"   */"}),
    t({"  public "}), f(function(args) return args[1][1] end, {10}), t({" "}), f(function(args) return "get" .. args[1][1]:gsub("^%l", string.upper) end, {11}), t({"() {"}),
    t({"    return "}), f(function(args) return args[1][1] end, {11}), t({";"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new builder for constructing instances."}),
    t({"   *"}),
    t({"   * @return a new builder instance"}),
    t({"   */"}),
    t({"  public static Builder builder() {"}),
    t({"    return new Builder();"}),
    t({"  }"}),
    t({""}),
    t({"  @Override"}),
    t({"  public boolean equals(Object obj) {"}),
    t({"    if (this == obj) return true;"}),
    t({"    if (!(obj instanceof "}), f(get_classname, {}), t({")) return false;"}),
    t({"    "}), f(get_classname, {}), t({" other = ("}), f(get_classname, {}), t({") obj;"}),
    t({"    return Objects.equals("}), f(function(args) return args[1][1] end, {9}), t({", other."}), f(function(args) return args[1][1] end, {9}), t({")"}),
    t({"        && "}), f(function(args) return args[1][1] end, {11}), t({" == other."}), f(function(args) return args[1][1] end, {11}), t({";"}),
    t({"  }"}),
    t({""}),
    t({"  @Override"}),
    t({"  public int hashCode() {"}),
    t({"    return Objects.hash("}), f(function(args) return args[1][1] end, {9}), t({", "}), f(function(args) return args[1][1] end, {11}), t({");"}),
    t({"  }"}),
    t({""}),
    t({"  @Override"}),
    t({"  public String toString() {"}),
    t({"    return MoreObjects.toStringHelper(this)"}),
    t({"        .add(\""}), f(function(args) return args[1][1] end, {9}), t({"\", "}), f(function(args) return args[1][1] end, {9}), t({")"}),
    t({"        .add(\""}), f(function(args) return args[1][1] end, {11}), t({"\", "}), f(function(args) return args[1][1] end, {11}), t({")"}),
    t({"        .toString();"}),
    t({"  }"}),
    t({""}),
    t({"  /** Builder for constructing "}), f(get_classname, {}), t({" instances. */"}),
    t({"  public static final class Builder {"}),
    t({"    private "}), f(function(args) return args[1][1] end, {8}), t({" "}), f(function(args) return args[1][1] end, {9}), t({";"}),
    t({"    private "}), f(function(args) return args[1][1] end, {10}), t({" "}), f(function(args) return args[1][1] end, {11}), t({";"}),
    t({""}),
    t({"    private Builder() {}"}),
    t({""}),
    t({"    public Builder "}), f(function(args) return "set" .. args[1][1]:gsub("^%l", string.upper) end, {9}), t({"("}), f(function(args) return args[1][1] end, {8}), t({" "}), f(function(args) return args[1][1] end, {9}), t({") {"}),
    t({"      this."}), f(function(args) return args[1][1] end, {9}), t({" = "}), f(function(args) return args[1][1] end, {9}), t({";"}),
    t({"      return this;"}),
    t({"    }"}),
    t({""}),
    t({"    public Builder "}), f(function(args) return "set" .. args[1][1]:gsub("^%l", string.upper) end, {11}), t({"("}), f(function(args) return args[1][1] end, {10}), t({" "}), f(function(args) return args[1][1] end, {11}), t({") {"}),
    t({"      this."}), f(function(args) return args[1][1] end, {11}), t({" = "}), f(function(args) return args[1][1] end, {11}), t({";"}),
    t({"      return this;"}),
    t({"    }"}),
    t({""}),
    t({"    public "}), f(get_classname, {}), t({" build() {"}),
    t({"      return new "}), f(get_classname, {}), t({"("}), f(function(args) return args[1][1] end, {9}), t({", "}), f(function(args) return args[1][1] end, {11}), t({");"}),
    t({"    }"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Google-style method with comprehensive documentation
  s("method", {
    t({"/**"}),
    t({" * "}), i(1, "Brief description of what the method does"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of the method's behavior, algorithm,"),
    t({" * "}), i(3, "side effects, and any important implementation details."),
    t({" *"}),
    t({" * <p>This method is thread-safe and can be called concurrently."}),
    t({" *"}),
    t({" * @param "}), i(4, "parameter"), t({" "}), i(5, "description of the parameter, including constraints,"),
    t({" *                  "}), i(6, "expected format, and any validation requirements"),
    t({" * @return "}), i(7, "description of the return value, including type information"),
    t({" *         "}), i(8, "and any special conditions or null handling"),
    t({" * @throws IllegalArgumentException if "}), i(9, "parameter validation fails"),
    t({" * @throws "}), i(10, "ProcessingException"), t({" if "}), i(11, "processing encounters an error"),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public "}), i(12, "String"), t({" "}), i(13, "processData"), t({"("}), i(14, "String parameter"), t({") {"}),
    t({"  Preconditions.checkNotNull("}), f(function(args) return args[1][1]:gsub("String ", "") end, {14}), t({", \"Parameter cannot be null\");"}),
    t({"  Preconditions.checkArgument(!"}), f(function(args) return args[1][1]:gsub("String ", "") end, {14}), t({".trim().isEmpty(), \"Parameter cannot be empty\");"}),
    t({"  "}),
    t({"  logger.fine(\"Processing data with parameter: \" + "}), f(function(args) return args[1][1]:gsub("String ", "") end, {14}), t({");"}),
    t({"  "}),
    t({"  try {"}),
    t({"    "}), i(15, "// Method implementation"),
    t({"    "}), f(function(args) return args[1][1] end, {12}), t({" result = "}), i(16, "performProcessing(parameter);"),
    t({"    "}),
    t({"    logger.fine(\"Processing completed successfully\");"}),
    t({"    return result;"}),
    t({"  } catch (Exception e) {"}),
    t({"    logger.log(Level.WARNING, \"Processing failed for parameter: \" + "}), f(function(args) return args[1][1]:gsub("String ", "") end, {14}), t({", e);"}),
    t({"    throw new "}), f(function(args) return args[1][1] end, {10}), t({"(\"Processing failed\", e);"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Interface definition with Google style
  s("interface", {
    t({"/**"}),
    t({" * "}), i(1, "Defines the contract for a service or component"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of the interface purpose, its role"),
    t({" * "}), i(3, "in the system, and guidelines for implementers."),
    t({" *"}),
    t({" * <p>Implementations of this interface should be thread-safe unless"}),
    t({" * otherwise specified."}),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public interface "}), i(4, "DataProcessor"), t({" {"}),
    t({""}),
    t({"  /**"}),
    t({"   * "}), i(5, "Processes the given input according to implementation-specific logic"),
    t({"   *"}),
    t({"   * @param input "}), i(6, "the data to process, cannot be null"),
    t({"   * @return "}), i(7, "the processed result, never null"),
    t({"   * @throws ProcessingException if processing fails"}),
    t({"   */"}),
    t({"  "}), i(8, "ProcessingResult"), t({" process("}), i(9, "InputData input"), t({")"}),
    t({"      throws ProcessingException;"}),
    t({""}),
    t({"  /**"}),
    t({"   * "}), i(10, "Validates whether the input can be processed"),
    t({"   *"}),
    t({"   * @param input "}), i(11, "the data to validate, cannot be null"),
    t({"   * @return {@code true} if the input is valid, {@code false} otherwise"}),
    t({"   */"}),
    t({"  boolean isValid("}), f(function(args) return args[1][1] end, {9}), t({");"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns the supported input types for this processor."}),
    t({"   *"}),
    t({"   * @return an immutable set of supported types, never null or empty"}),
    t({"   */"}),
    t({"  ImmutableSet<Class<?>> getSupportedTypes();"}),
    t({"}"}),
    i(0)
  }),

  -- Modern enum with comprehensive features
  s("enum", {
    t({"/**"}),
    t({" * "}), i(1, "Represents the possible states or types for the domain"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of what each enum value represents"),
    t({" * "}), i(3, "and the business logic behind the enumeration."),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public enum "}), i(4, "ProcessingStatus"), t({" {"}),
    t({""}),
    t({"  /** "}), i(5, "Processing has not yet started"), t({". */"}),
    t({"  "}), i(6, "PENDING"), t({"(\""}), i(7, "Pending"), t({"\", "}), i(8, "false"), t({"),"}),
    t({""}),
    t({"  /** "}), i(9, "Processing is currently in progress"), t({". */"}),
    t({"  "}), i(10, "IN_PROGRESS"), t({"(\""}), i(11, "In Progress"), t({"\", "}), i(12, "false"), t({"),"}),
    t({""}),
    t({"  /** "}), i(13, "Processing completed successfully"), t({". */"}),
    t({"  "}), i(14, "COMPLETED"), t({"(\""}), i(15, "Completed"), t({"\", "}), i(16, "true"), t({"),"}),
    t({""}),
    t({"  /** "}), i(17, "Processing failed with an error"), t({". */"}),
    t({"  "}), i(18, "FAILED"), t({"(\""}), i(19, "Failed"), t({"\", "}), i(20, "true"), t({");"}),
    t({""}),
    t({"  private final String displayName;"}),
    t({"  private final boolean terminal;"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new status with the specified properties."}),
    t({"   *"}),
    t({"   * @param displayName human-readable name for the status"}),
    t({"   * @param terminal whether this status represents a final state"}),
    t({"   */"}),
    t({"  "}), f(function(args) return args[1][1] end, {4}), t({"(String displayName, boolean terminal) {"}),
    t({"    this.displayName = Preconditions.checkNotNull(displayName);"}),
    t({"    this.terminal = terminal;"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns the human-readable display name."}),
    t({"   *"}),
    t({"   * @return the display name, never null"}),
    t({"   */"}),
    t({"  public String getDisplayName() {"}),
    t({"    return displayName;"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns whether this status represents a terminal state."}),
    t({"   *"}),
    t({"   * @return {@code true} if terminal, {@code false} otherwise"}),
    t({"   */"}),
    t({"  public boolean isTerminal() {"}),
    t({"    return terminal;"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Returns all terminal statuses."}),
    t({"   *"}),
    t({"   * @return an immutable list of terminal statuses"}),
    t({"   */"}),
    t({"  public static ImmutableList<"}), f(function(args) return args[1][1] end, {4}), t({"> getTerminalStatuses() {"}),
    t({"    return Arrays.stream(values())"}),
    t({"        .filter("}), f(function(args) return args[1][1] end, {4}), t({"::isTerminal)"}),
    t({"        .collect(ImmutableList.toImmutableList());"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Exception class with Google style
  s("exception", {
    t({"/**"}),
    t({" * "}), i(1, "Thrown when a specific processing error occurs"),
    t({" *"}),
    t({" * <p>"}), i(2, "Detailed description of when this exception is thrown,"),
    t({" * "}), i(3, "what conditions trigger it, and how it should be handled."),
    t({" *"}),
    t({" * @author Illya Starikov"}),
    t({" * @since "}), f(get_date, {}),
    t({" */"}),
    t({"public final class "}), i(4, "ProcessingException"), t({" extends Exception {"}),
    t({""}),
    t({"  private static final long serialVersionUID = 1L;"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new exception with the specified message."}),
    t({"   *"}),
    t({"   * @param message the detail message, can be null"}),
    t({"   */"}),
    t({"  public "}), f(function(args) return args[1][1] end, {4}), t({"(String message) {"}),
    t({"    super(message);"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new exception with the specified message and cause."}),
    t({"   *"}),
    t({"   * @param message the detail message, can be null"}),
    t({"   * @param cause the underlying cause, can be null"}),
    t({"   */"}),
    t({"  public "}), f(function(args) return args[1][1] end, {4}), t({"(String message, Throwable cause) {"}),
    t({"    super(message, cause);"}),
    t({"  }"}),
    t({""}),
    t({"  /**"}),
    t({"   * Creates a new exception with the specified cause."}),
    t({"   *"}),
    t({"   * @param cause the underlying cause, can be null"}),
    t({"   */"}),
    t({"  public "}), f(function(args) return args[1][1] end, {4}), t({"(Throwable cause) {"}),
    t({"    super(cause);"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Modern JUnit 5 test class
  s("test", {
    t({"import static com.google.common.truth.Truth.assertThat;"}),
    t({"import static org.junit.jupiter.api.Assertions.assertThrows;"}),
    t({""}),
    t({"import com.google.common.collect.ImmutableList;"}),
    t({"import org.junit.jupiter.api.BeforeEach;"}),
    t({"import org.junit.jupiter.api.DisplayName;"}),
    t({"import org.junit.jupiter.api.Nested;"}),
    t({"import org.junit.jupiter.api.Test;"}),
    t({"import org.junit.jupiter.params.ParameterizedTest;"}),
    t({"import org.junit.jupiter.params.provider.ValueSource;"}),
    t({"import org.mockito.Mock;"}),
    t({"import org.mockito.MockitoAnnotations;"}),
    t({""}),
    t({"/**"}),
    t({" * Unit tests for "}), i(1, "DataProcessor"), t({"."}),
    t({" *"}),
    t({" * <p>This test class comprehensively validates the behavior of"}),
    t({" * "}), f(function(args) return args[1][1] end, {1}), t({" including edge cases, error conditions,"}),
    t({" * and integration scenarios."}),
    t({" */"}),
    t({"@DisplayName(\""}), f(function(args) return args[1][1] end, {1}), t({" Tests\")"}),
    t({"final class "}), f(function(args) return args[1][1] end, {1}), t({"Test {"}),
    t({""}),
    t({"  @Mock private "}), i(2, "DependencyService"), t({" "}), i(3, "mockDependency"), t({";"}),
    t({"  "}),
    t({"  private "}), f(function(args) return args[1][1] end, {1}), t({" "}), i(4, "processor"), t({";"}),
    t({""}),
    t({"  @BeforeEach"}),
    t({"  void setUp() {"}),
    t({"    MockitoAnnotations.openMocks(this);"}),
    t({"    "}), f(function(args) return args[1][1] end, {4}), t({" = new "}), f(function(args) return args[1][1] end, {1}), t({"("}), f(function(args) return args[1][1] end, {3}), t({");"}),
    t({"  }"}),
    t({""}),
    t({"  @Nested"}),
    t({"  @DisplayName(\"Normal Operation Tests\")"}),
    t({"  class NormalOperationTests {"}),
    t({""}),
    t({"    @Test"}),
    t({"    @DisplayName(\"should process valid input successfully\")"}),
    t({"    void shouldProcessValidInputSuccessfully() {"}),
    t({"      // Given"}),
    t({"      "}), i(5, "String input = \"valid-input\";"),
    t({"      "}), i(6, "String expected = \"processed-valid-input\";"),
    t({"      "}),
    t({"      // When"}),
    t({"      "}), i(7, "String result = processor.process(input);"),
    t({"      "}),
    t({"      // Then"}),
    t({"      assertThat(result).isEqualTo(expected);"}),
    t({"    }"}),
    t({""}),
    t({"    @ParameterizedTest"}),
    t({"    @ValueSource(strings = {"}), i(8, "\"input1\", \"input2\", \"input3\""), t({"})"}),
    t({"    @DisplayName(\"should handle multiple valid inputs\")"}),
    t({"    void shouldHandleMultipleValidInputs(String input) {"}),
    t({"      // When"}),
    t({"      "}), i(9, "String result = processor.process(input);"),
    t({"      "}),
    t({"      // Then"}),
    t({"      assertThat(result).isNotNull();"}),
    t({"      assertThat(result).isNotEmpty();"}),
    t({"    }"}),
    t({"  }"}),
    t({""}),
    t({"  @Nested"}),
    t({"  @DisplayName(\"Error Handling Tests\")"}),
    t({"  class ErrorHandlingTests {"}),
    t({""}),
    t({"    @Test"}),
    t({"    @DisplayName(\"should throw exception for null input\")"}),
    t({"    void shouldThrowExceptionForNullInput() {"}),
    t({"      // When & Then"}),
    t({"      IllegalArgumentException exception = assertThrows("}),
    t({"          IllegalArgumentException.class,"}),
    t({"          () -> "}), f(function(args) return args[1][1] end, {4}), t({".process(null)"}),
    t({"      );"}),
    t({"      "}),
    t({"      assertThat(exception)"}),
    t({"          .hasMessageThat()"}),
    t({"          .contains(\"cannot be null\");"}),
    t({"    }"}),
    t({""}),
    t({"    @Test"}),
    t({"    @DisplayName(\"should throw exception for invalid input\")"}),
    t({"    void shouldThrowExceptionForInvalidInput() {"}),
    t({"      // Given"}),
    t({"      String invalidInput = \"\";"}),
    t({"      "}),
    t({"      // When & Then"}),
    t({"      "}), i(10, "ProcessingException"), t({" exception = assertThrows("}),
    t({"          "}), f(function(args) return args[1][1] end, {10}), t({".class,"}),
    t({"          () -> "}), f(function(args) return args[1][1] end, {4}), t({".process(invalidInput)"}),
    t({"      );"}),
    t({"      "}),
    t({"      assertThat(exception)"}),
    t({"          .hasMessageThat()"}),
    t({"          .contains(\"invalid input\");"}),
    t({"    }"}),
    t({"  }"}),
    t({""}),
    t({"  @Nested"}),
    t({"  @DisplayName(\"Integration Tests\")"}),
    t({"  class IntegrationTests {"}),
    t({""}),
    t({"    @Test"}),
    t({"    @DisplayName(\"should integrate with dependency service correctly\")"}),
    t({"    void shouldIntegrateWithDependencyServiceCorrectly() {"}),
    t({"      // Given"}),
    t({"      when("}), f(function(args) return args[1][1] end, {3}), t({"."}), i(11, "someMethod"), t({"(any())).thenReturn("}), i(12, "expectedValue"), t({");"}),
    t({"      "}),
    t({"      // When"}),
    t({"      "}), i(13, "String result = processor.processWithDependency(\"test\");"),
    t({"      "}),
    t({"      // Then"}),
    t({"      assertThat(result).contains("}), f(function(args) return args[1][1] end, {12}), t({");"}),
    t({"      verify("}), f(function(args) return args[1][1] end, {3}), t({")."}), f(function(args) return args[1][1] end, {11}), t({"(\"test\");"}),
    t({"    }"}),
    t({"  }"}),
    t({"}"}),
    i(0)
  }),

  -- Stream API usage patterns
  s("stream", {
    t({"// Stream processing with Google's preferred patterns"}),
    t({"ImmutableList<"}), i(1, "String"), t({"> result = "}), i(2, "inputList"), t({".stream()"}),
    t({"    .filter("}), i(3, "item -> !item.isEmpty()"), t({")"}),
    t({"    .map("}), i(4, "String::toUpperCase"), t({")"}),
    t({"    .distinct()"}),
    t({"    .sorted()"}),
    t({"    .collect(ImmutableList.toImmutableList());"}),
    t({""}),
    t({"// Optional handling"}),
    t({"Optional<"}), f(function(args) return args[1][1] end, {1}), t({"> found = result.stream()"}),
    t({"    .filter("}), i(5, "item -> item.startsWith(\"PREFIX\")"), t({")"}),
    t({"    .findFirst();"}),
    t({""}),
    f(function(args) return args[1][1] end, {1}), t({" processed = found"}),
    t({"    .map("}), i(6, "this::processItem"), t({")"}),
    t({"    .orElse("}), i(7, "defaultValue"), t({");"}),
    i(0)
  }),

  -- Google Guava utilities
  s("guava", {
    t({"import com.google.common.base.Preconditions;"}),
    t({"import com.google.common.base.Strings;"}),
    t({"import com.google.common.collect.ImmutableList;"}),
    t({"import com.google.common.collect.ImmutableMap;"}),
    t({"import com.google.common.collect.ImmutableSet;"}),
    t({""}),
    t({"// Preconditions for input validation"}),
    t({"Preconditions.checkNotNull("}), i(1, "parameter"), t({", \"Parameter cannot be null\");"}),
    t({"Preconditions.checkArgument("}), i(2, "condition"), t({", \"Invalid argument: %s\", "}), i(3, "value"), t({");"}),
    t({"Preconditions.checkState("}), i(4, "isInitialized"), t({", \"Object not initialized\");"}),
    t({""}),
    t({"// Immutable collections"}),
    t({"ImmutableList<"}), i(5, "String"), t({"> list = ImmutableList.of("}), i(6, "\"item1\", \"item2\""), t({");"}),
    t({"ImmutableSet<"}), f(function(args) return args[1][1] end, {5}), t({"> set = ImmutableSet.copyOf("}), i(7, "sourceCollection"), t({");"}),
    t({"ImmutableMap<String, "}), f(function(args) return args[1][1] end, {5}), t({"> map = ImmutableMap.<String, "}), f(function(args) return args[1][1] end, {5}), t({">builder()"}),
    t({"    .put("}), i(8, "\"key1\", \"value1\""), t({")"}),
    t({"    .put("}), i(9, "\"key2\", \"value2\""), t({")"}),
    t({"    .build();"}),
    t({""}),
    t({"// String utilities"}),
    t({"String safe = Strings.nullToEmpty("}), i(10, "potentiallyNullString"), t({");"}),
    t({"boolean isEmpty = Strings.isNullOrEmpty("}), i(11, "stringToCheck"), t({");"}),
    i(0)
  }),

  -- Simple utility snippets
  s("sysout", {
    t({"System.out.println("}), i(1, "\"Hello, World!\""), t({");"}),
    i(0)
  }),

  s("logger", {
    t({"private static final Logger logger = Logger.getLogger("}), f(get_classname, {}), t({".class.getName());"}),
    i(0)
  }),

  s("override", {
    t({"@Override"}),
    i(0)
  }),

  s("todo", {
    t({"// TODO("}), i(1, "username"), t({"): "}), i(2, "Description of what needs to be done"),
    i(0)
  }),
}