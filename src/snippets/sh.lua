--
-- Shell snippets - Google Shell Style Guide compliant templates
-- Following https://google.github.io/styleguide/shellguide.html
--

local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node

-- Helper functions following Google naming conventions
local function get_filename()
  return vim.fn.expand('%:t') or 'script.sh'
end

local function get_script_name()
  local filename = vim.fn.expand('%:t:r') or 'script'
  return filename:upper():gsub('%.', '_'):gsub('-', '_')
end

local function get_date()
  return os.date('%Y-%m-%d')
end

local function get_year()
  return os.date('%Y')
end

return {
  -- Google-style script header with comprehensive metadata
  s("header", {
    t({"#!/bin/bash"}),
    t({"#"}),
    t({"# Copyright "}), f(get_year, {}), t({" Illya Starikov"}),
    t({"#"}),
    t({"# Licensed under the Apache License, Version 2.0 (the \"License\");"}),
    t({"# you may not use this file except in compliance with the License."}),
    t({"# You may obtain a copy of the License at"}),
    t({"#"}),
    t({"#     http://www.apache.org/licenses/LICENSE-2.0"}),
    t({"#"}),
    t({"# Unless required by applicable law or agreed to in writing, software"}),
    t({"# distributed under the License is distributed on an \"AS IS\" BASIS,"}),
    t({"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}),
    t({"# See the License for the specific language governing permissions and"}),
    t({"# limitations under the License."}),
    t({""}),
    t({"# "}), i(1, "Brief description of what this script does"),
    t({"#"}),
    t({"# "}), i(2, "Detailed description of the script's purpose, requirements,"),
    t({"# "}), i(3, "and any important usage notes or dependencies."),
    t({"#"}),
    t({"# Usage: "}), f(get_filename, {}), t({" "}), i(4, "[OPTIONS] ARGUMENTS"),
    t({"#"}),
    t({"# Author: Illya Starikov ("}), i(5, "email@example.com"), t({")"}),
    t({"# Created: "}), f(get_date, {}),
    t({""}),
    t({"# Enable strict error handling"}),
    t({"set -euo pipefail"}),
    t({""}),
    i(0)
  }),

  -- Professional script template with Google best practices
  s("script", {
    t({"#!/bin/bash"}),
    t({"#"}),
    t({"# "}), i(1, "Professional script following Google Shell Style Guide"),
    t({"#"}),
    t({"# This script demonstrates best practices for production shell scripts"}),
    t({"# including proper error handling, logging, and argument validation."}),
    t({"#"}),
    t({"# Usage: "}), f(get_filename, {}), t({" [--verbose] [--dry-run] [--help]"}),
    t({""}),
    t({"set -euo pipefail"}),
    t({""}),
    t({"# Script metadata"}),
    t({"readonly SCRIPT_NAME=\"$(basename \"${BASH_SOURCE[0]}\")\""}),
    t({"readonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\""}),
    t({"readonly SCRIPT_VERSION=\""}), i(2, "1.0.0"), t({"\""}),
    t({""}),
    t({"# Global configuration"}),
    t({"readonly DEFAULT_LOG_LEVEL=\"INFO\""}),
    t({"readonly LOG_FORMAT=\"%Y-%m-%d %H:%M:%S\""}),
    t({""}),
    t({"# Runtime flags"}),
    t({"VERBOSE=\"false\""}),
    t({"DRY_RUN=\"false\""}),
    t({"LOG_LEVEL=\"${DEFAULT_LOG_LEVEL}\""}),
    t({""}),
    t({"# Colors for output (only if terminal supports it)"}),
    t({"if [[ -t 1 ]] && command -v tput >/dev/null 2>&1; then"}),
    t({"  readonly RED=\"$(tput setaf 1)\""}),
    t({"  readonly GREEN=\"$(tput setaf 2)\""}),
    t({"  readonly YELLOW=\"$(tput setaf 3)\""}),
    t({"  readonly BLUE=\"$(tput setaf 4)\""}),
    t({"  readonly MAGENTA=\"$(tput setaf 5)\""}),
    t({"  readonly CYAN=\"$(tput setaf 6)\""}),
    t({"  readonly WHITE=\"$(tput setaf 7)\""}),
    t({"  readonly BOLD=\"$(tput bold)\""}),
    t({"  readonly NORMAL=\"$(tput sgr0)\""}),
    t({"else"}),
    t({"  readonly RED=\"\""}),
    t({"  readonly GREEN=\"\""}),
    t({"  readonly YELLOW=\"\""}),
    t({"  readonly BLUE=\"\""}),
    t({"  readonly MAGENTA=\"\""}),
    t({"  readonly CYAN=\"\""}),
    t({"  readonly WHITE=\"\""}),
    t({"  readonly BOLD=\"\""}),
    t({"  readonly NORMAL=\"\""}),
    t({"fi"}),
    t({""}),
    t({"################################################################################"}),
    t({"# Logging and utility functions"}),
    t({"################################################################################"}),
    t({""}),
    t({"# Logs a message with timestamp and level"}),
    t({"# Arguments:"}),
    t({"#   $1 - Log level (DEBUG, INFO, WARN, ERROR)"}),
    t({"#   $2 - Message to log"}),
    t({"# Outputs:"}),
    t({"#   Formatted log message to stderr"}),
    t({"log_message() {"}),
    t({"  local level=\"$1\""}),
    t({"  local message=\"$2\""}),
    t({"  local timestamp"}),
    t({"  timestamp=\"$(date \"+${LOG_FORMAT}\")\""}),
    t({"  "}),
    t({"  # Only log if level is appropriate"}),
    t({"  case \"${LOG_LEVEL}\" in"}),
    t({"    \"DEBUG\")"}),
    t({"      ;;"}),
    t({"    \"INFO\")"}),
    t({"      [[ \"${level}\" != \"DEBUG\" ]] || return 0"}),
    t({"      ;;"}),
    t({"    \"WARN\")"}),
    t({"      [[ \"${level}\" != \"DEBUG\" && \"${level}\" != \"INFO\" ]] || return 0"}),
    t({"      ;;"}),
    t({"    \"ERROR\")"}),
    t({"      [[ \"${level}\" == \"ERROR\" ]] || return 0"}),
    t({"      ;;"}),
    t({"  esac"}),
    t({"  "}),
    t({"  # Format with colors if available"}),
    t({"  case \"${level}\" in"}),
    t({"    \"DEBUG\")  echo \"${CYAN}[${timestamp}] [DEBUG] ${message}${NORMAL}\" >&2 ;;"}),
    t({"    \"INFO\")   echo \"${GREEN}[${timestamp}] [INFO]  ${message}${NORMAL}\" >&2 ;;"}),
    t({"    \"WARN\")   echo \"${YELLOW}[${timestamp}] [WARN]  ${message}${NORMAL}\" >&2 ;;"}),
    t({"    \"ERROR\")  echo \"${RED}[${timestamp}] [ERROR] ${message}${NORMAL}\" >&2 ;;"}),
    t({"    *)        echo \"[${timestamp}] [${level}] ${message}\" >&2 ;;"}),
    t({"  esac"}),
    t({"}"}),
    t({""}),
    t({"# Convenience logging functions"}),
    t({"log_debug() { log_message \"DEBUG\" \"$*\"; }"}),
    t({"log_info()  { log_message \"INFO\" \"$*\"; }"}),
    t({"log_warn()  { log_message \"WARN\" \"$*\"; }"}),
    t({"log_error() { log_message \"ERROR\" \"$*\"; }"}),
    t({""}),
    t({"# Prints an error message and exits"}),
    t({"# Arguments:"}),
    t({"#   $1 - Error message"}),
    t({"#   $2 - Exit code (optional, defaults to 1)"}),
    t({"die() {"}),
    t({"  local message=\"$1\""}),
    t({"  local exit_code=\"${2:-1}\""}),
    t({"  log_error \"${message}\""}),
    t({"  exit \"${exit_code}\""}),
    t({"}"}),
    t({""}),
    t({"# Checks if a command exists"}),
    t({"# Arguments:"}),
    t({"#   $1 - Command name"}),
    t({"# Returns:"}),
    t({"#   0 if command exists, 1 otherwise"}),
    t({"command_exists() {"}),
    t({"  command -v \"$1\" >/dev/null 2>&1"}),
    t({"}"}),
    t({""}),
    t({"# Validates that required commands are available"}),
    t({"# Arguments:"}),
    t({"#   $@ - List of required commands"}),
    t({"validate_dependencies() {"}),
    t({"  local missing_commands=()"}),
    t({"  "}),
    t({"  for cmd in \"$@\"; do"}),
    t({"    if ! command_exists \"${cmd}\"; then"}),
    t({"      missing_commands+=(\"${cmd}\")"}),
    t({"    fi"}),
    t({"  done"}),
    t({"  "}),
    t({"  if [[ ${#missing_commands[@]} -gt 0 ]]; then"}),
    t({"    die \"Missing required commands: ${missing_commands[*]}\""}),
    t({"  fi"}),
    t({"}"}),
    t({""}),
    t({"################################################################################"}),
    t({"# Signal handling and cleanup"}),
    t({"################################################################################"}),
    t({""}),
    t({"# List of temporary files and directories to clean up"}),
    t({"CLEANUP_FILES=()"}),
    t({"CLEANUP_DIRS=()"}),
    t({""}),
    t({"# Cleanup function called on script exit"}),
    t({"cleanup() {"}),
    t({"  local exit_code=$?"}),
    t({"  "}),
    t({"  log_debug \"Starting cleanup...\""}),
    t({"  "}),
    t({"  # Remove temporary files"}),
    t({"  for file in \"${CLEANUP_FILES[@]}\"; do"}),
    t({"    if [[ -f \"${file}\" ]]; then"}),
    t({"      log_debug \"Removing temporary file: ${file}\""}),
    t({"      rm -f \"${file}\" || log_warn \"Failed to remove ${file}\""}),
    t({"    fi"}),
    t({"  done"}),
    t({"  "}),
    t({"  # Remove temporary directories"}),
    t({"  for dir in \"${CLEANUP_DIRS[@]}\"; do"}),
    t({"    if [[ -d \"${dir}\" ]]; then"}),
    t({"      log_debug \"Removing temporary directory: ${dir}\""}),
    t({"      rm -rf \"${dir}\" || log_warn \"Failed to remove ${dir}\""}),
    t({"    fi"}),
    t({"  done"}),
    t({"  "}),
    t({"  log_debug \"Cleanup completed\""}),
    t({"  exit \"${exit_code}\""}),
    t({"}"}),
    t({""}),
    t({"# Register cleanup function for various signals"}),
    t({"trap cleanup EXIT"}),
    t({"trap cleanup INT"}),
    t({"trap cleanup TERM"}),
    t({""}),
    t({"# Creates a temporary file and registers it for cleanup"}),
    t({"# Arguments:"}),
    t({"#   $1 - Optional prefix for the temporary file"}),
    t({"# Outputs:"}),
    t({"#   Path to the created temporary file"}),
    t({"create_temp_file() {"}),
    t({"  local prefix=\"${1:-tmp}\""}),
    t({"  local temp_file"}),
    t({"  temp_file=\"$(mktemp -t \"${prefix}.XXXXXX\")\""}),
    t({"  CLEANUP_FILES+=(\"${temp_file}\")"}),
    t({"  echo \"${temp_file}\""}),
    t({"}"}),
    t({""}),
    t({"# Creates a temporary directory and registers it for cleanup"}),
    t({"# Arguments:"}),
    t({"#   $1 - Optional prefix for the temporary directory"}),
    t({"# Outputs:"}),
    t({"#   Path to the created temporary directory"}),
    t({"create_temp_dir() {"}),
    t({"  local prefix=\"${1:-tmp}\""}),
    t({"  local temp_dir"}),
    t({"  temp_dir=\"$(mktemp -d -t \"${prefix}.XXXXXX\")\""}),
    t({"  CLEANUP_DIRS+=(\"${temp_dir}\")"}),
    t({"  echo \"${temp_dir}\""}),
    t({"}"}),
    t({""}),
    t({"################################################################################"}),
    t({"# Argument parsing and validation"}),
    t({"################################################################################"}),
    t({""}),
    t({"# Displays usage information"}),
    t({"usage() {"}),
    t({"  cat << EOF"}),
    t({"Usage: ${SCRIPT_NAME} [OPTIONS] "}), i(3, "ARGUMENTS"),
    t({""}),
    t({""}), i(4, "Brief description of what this script does."),
    t({""}),
    t({"OPTIONS:"}),
    t({"    -h, --help           Show this help message and exit"}),
    t({"    -v, --verbose        Enable verbose output (DEBUG level)"}),
    t({"    -q, --quiet          Suppress INFO messages (WARN and ERROR only)"}),
    t({"    -n, --dry-run        Show what would be done without actually doing it"}),
    t({"    --version            Show version information and exit"}),
    t({"    --log-level LEVEL    Set log level (DEBUG, INFO, WARN, ERROR)"}),
    t({""}),
    t({"ARGUMENTS:"}),
    t({"    "}), i(5, "arg1        Description of first argument"),
    t({"    "}), i(6, "arg2        Description of second argument"),
    t({""}),
    t({"EXAMPLES:"}),
    t({"    ${SCRIPT_NAME} --verbose "}), i(7, "example_arg1 example_arg2"),
    t({"    ${SCRIPT_NAME} --dry-run --log-level DEBUG "}), f(function(args) return args[1][1] end, {7}),
    t({""}),
    t({"ENVIRONMENT:"}),
    t({"    "}), f(get_script_name, {}), t({"_LOG_LEVEL    Override default log level"}),
    t({"    "}), f(get_script_name, {}), t({"_VERBOSE      Enable verbose mode (any non-empty value)"}),
    t({""}),
    t({"EOF"}),
    t({"}"}),
    t({""}),
    t({"# Parses command-line arguments"}),
    t({"# Arguments:"}),
    t({"#   $@ - All command-line arguments"}),
    t({"parse_arguments() {"}),
    t({"  # Apply environment variable defaults"}),
    t({"  if [[ -n \"${"}), f(get_script_name, {}), t({"_LOG_LEVEL:-}\" ]]; then"}),
    t({"    LOG_LEVEL=\"${"}), f(get_script_name, {}), t({"_LOG_LEVEL}\""}),
    t({"  fi"}),
    t({"  "}),
    t({"  if [[ -n \"${"}), f(get_script_name, {}), t({"_VERBOSE:-}\" ]]; then"}),
    t({"    VERBOSE=\"true\""}),
    t({"    LOG_LEVEL=\"DEBUG\""}),
    t({"  fi"}),
    t({"  "}),
    t({"  # Parse command-line options"}),
    t({"  while [[ $# -gt 0 ]]; do"}),
    t({"    case $1 in"}),
    t({"      -h|--help)"}),
    t({"        usage"}),
    t({"        exit 0"}),
    t({"        ;;"}),
    t({"      -v|--verbose)"}),
    t({"        VERBOSE=\"true\""}),
    t({"        LOG_LEVEL=\"DEBUG\""}),
    t({"        shift"}),
    t({"        ;;"}),
    t({"      -q|--quiet)"}),
    t({"        LOG_LEVEL=\"WARN\""}),
    t({"        shift"}),
    t({"        ;;"}),
    t({"      -n|--dry-run)"}),
    t({"        DRY_RUN=\"true\""}),
    t({"        shift"}),
    t({"        ;;"}),
    t({"      --version)"}),
    t({"        echo \"${SCRIPT_NAME} version ${SCRIPT_VERSION}\""}),
    t({"        exit 0"}),
    t({"        ;;"}),
    t({"      --log-level)"}),
    t({"        if [[ -z \"${2:-}\" ]]; then"}),
    t({"          die \"--log-level requires a value\""}),
    t({"        fi"}),
    t({"        LOG_LEVEL=\"$2\""}),
    t({"        shift 2"}),
    t({"        ;;"}),
    t({"      --log-level=*)"}),
    t({"        LOG_LEVEL=\"${1#*=}\""}),
    t({"        shift"}),
    t({"        ;;"}),
    t({"      --)"}),
    t({"        shift"}),
    t({"        break"}),
    t({"        ;;"}),
    t({"      -*)"}),
    t({"        die \"Unknown option: $1\""}),
    t({"        ;;"}),
    t({"      *)"}),
    t({"        break"}),
    t({"        ;;"}),
    t({"    esac"}),
    t({"  done"}),
    t({"  "}),
    t({"  # Validate log level"}),
    t({"  case \"${LOG_LEVEL}\" in"}),
    t({"    DEBUG|INFO|WARN|ERROR)"}),
    t({"      ;;"}),
    t({"    *)"}),
    t({"      die \"Invalid log level: ${LOG_LEVEL}. Must be DEBUG, INFO, WARN, or ERROR\""}),
    t({"      ;;"}),
    t({"  esac"}),
    t({"  "}),
    t({"  # Store remaining arguments"}),
    t({"  readonly ARGS=(\"$@\")"}),
    t({"  "}),
    t({"  # Validate required arguments"}),
    t({"  if [[ ${#ARGS[@]} -lt "}), i(8, "1"), t({" ]]; then"}),
    t({"    die \"Missing required arguments. Use --help for usage information.\""}),
    t({"  fi"}),
    t({"}"}),
    t({""}),
    t({"################################################################################"}),
    t({"# Main application logic"}),
    t({"################################################################################"}),
    t({""}),
    t({"# Main function containing the core script logic"}),
    t({"# Arguments:"}),
    t({"#   $@ - Processed command-line arguments"}),
    t({"main() {"}),
    t({"  local args=(\"$@\")"}),
    t({"  "}),
    t({"  log_info \"Starting ${SCRIPT_NAME} version ${SCRIPT_VERSION}\""}),
    t({"  log_debug \"Script directory: ${SCRIPT_DIR}\""}),
    t({"  log_debug \"Arguments: ${args[*]}\""}),
    t({"  log_debug \"Verbose mode: ${VERBOSE}\""}),
    t({"  log_debug \"Dry run mode: ${DRY_RUN}\""}),
    t({"  log_debug \"Log level: ${LOG_LEVEL}\""}),
    t({"  "}),
    t({"  # Validate dependencies"}),
    t({"  "}), i(9, "# validate_dependencies \"required_command1\" \"required_command2\""),
    t({"  "}),
    t({"  # Create temporary files if needed"}),
    t({"  "}), i(10, "# local temp_file=\"$(create_temp_file)\""),
    t({"  "}), i(11, "# local temp_dir=\"$(create_temp_dir)\""),
    t({"  "}),
    t({"  # Main application logic here"}),
    t({"  "}), i(12, "# Replace this with your actual implementation"),
    t({"  log_info \"Processing arguments: ${args[*]}\""}),
    t({"  "}),
    t({"  if [[ \"${DRY_RUN}\" == \"true\" ]]; then"}),
    t({"    log_info \"DRY RUN: Would process the following:\""}),
    t({"    for arg in \"${args[@]}\"; do"}),
    t({"      log_info \"  - ${arg}\""}),
    t({"    done"}),
    t({"  else"}),
    t({"    "}), i(13, "# Actual processing logic"),
    t({"    for arg in \"${args[@]}\"; do"}),
    t({"      log_info \"Processing: ${arg}\""}),
    t({"      "}), i(14, "# Add your processing logic here"),
    t({"    done"}),
    t({"  fi"}),
    t({"  "}),
    t({"  log_info \"${SCRIPT_NAME} completed successfully\""}),
    t({"}"}),
    t({""}),
    t({"################################################################################"}),
    t({"# Script entry point"}),
    t({"################################################################################"}),
    t({""}),
    t({"# Only run main if script is executed directly (not sourced)"}),
    t({"if [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then"}),
    t({"  parse_arguments \"$@\""}),
    t({"  main \"${ARGS[@]}\""}),
    t({"fi"}),
    i(0)
  }),

  -- Function template with Google documentation style
  s("function", {
    t({"# "}), i(1, "Brief description of what this function does"),
    t({"#"}),
    t({"# "}), i(2, "Detailed description of the function's behavior, including"),
    t({"# "}), i(3, "any side effects, assumptions, or important implementation details."),
    t({"#"}),
    t({"# Arguments:"}),
    t({"#   $1 - "}), i(4, "Description of first parameter"),
    t({"#   $2 - "}), i(5, "Description of second parameter"),
    t({"# Globals:"}),
    t({"#   "}), i(6, "GLOBAL_VAR"), t({" - "}), i(7, "Description of global variable used"),
    t({"# Outputs:"}),
    t({"#   "}), i(8, "Description of what is written to stdout/stderr"),
    t({"# Returns:"}),
    t({"#   "}), i(9, "0 on success, non-zero on error"),
    t({"# Examples:"}),
    t({"#   "}), i(10, "function_name \"arg1\" \"arg2\""),
    i(11, "function_name"), t({"() {"}),
    t({"  local first_arg=\"$1\""}),
    t({"  local second_arg=\"$2\""}),
    t({"  "}),
    t({"  # Validate arguments"}),
    t({"  if [[ -z \"${first_arg:-}\" ]]; then"}),
    t({"    log_error \"First argument is required\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  if [[ -z \"${second_arg:-}\" ]]; then"}),
    t({"    log_error \"Second argument is required\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  log_debug \"Function called with: ${first_arg}, ${second_arg}\""}),
    t({"  "}),
    t({"  "}), i(12, "# Function implementation here"),
    t({"  "}), i(13, "echo \"Result: ${first_arg} ${second_arg}\""),
    t({"  "}),
    t({"  return 0"}),
    t({"}"}),
    i(0)
  }),

  -- Error handling patterns
  s("error_handling", {
    t({"# Comprehensive error handling example"}),
    t({"handle_command_error() {"}),
    t({"  local command=\"$1\""}),
    t({"  local exit_code=\"$2\""}),
    t({"  local error_output=\"$3\""}),
    t({"  "}),
    t({"  case \"${exit_code}\" in"}),
    t({"    0)"}),
    t({"      log_debug \"Command '${command}' completed successfully\""}),
    t({"      ;;"}),
    t({"    1)"}),
    t({"      log_error \"Command '${command}' failed with general error\""}),
    t({"      log_debug \"Error output: ${error_output}\""}),
    t({"      return 1"}),
    t({"      ;;"}),
    t({"    2)"}),
    t({"      log_error \"Command '${command}' failed with usage error\""}),
    t({"      log_debug \"Error output: ${error_output}\""}),
    t({"      return 2"}),
    t({"      ;;"}),
    t({"    126)"}),
    t({"      log_error \"Command '${command}' found but not executable\""}),
    t({"      return 126"}),
    t({"      ;;"}),
    t({"    127)"}),
    t({"      log_error \"Command '${command}' not found\""}),
    t({"      return 127"}),
    t({"      ;;"}),
    t({"    *)"}),
    t({"      log_error \"Command '${command}' failed with exit code ${exit_code}\""}),
    t({"      log_debug \"Error output: ${error_output}\""}),
    t({"      return \"${exit_code}\""}),
    t({"      ;;"}),
    t({"  esac"}),
    t({"}"}),
    t({""}),
    t({"# Safe command execution with error handling"}),
    t({"safe_run() {"}),
    t({"  local command=(\"$@\")"}),
    t({"  local output"}),
    t({"  local exit_code"}),
    t({"  "}),
    t({"  log_debug \"Executing: ${command[*]}\""}),
    t({"  "}),
    t({"  if [[ \"${DRY_RUN:-false}\" == \"true\" ]]; then"}),
    t({"    log_info \"DRY RUN: ${command[*]}\""}),
    t({"    return 0"}),
    t({"  fi"}),
    t({"  "}),
    t({"  if output=\"$(\"${command[@]}\" 2>&1)\"; then"}),
    t({"    exit_code=0"}),
    t({"    [[ -n \"${output}\" ]] && log_debug \"Command output: ${output}\""}),
    t({"  else"}),
    t({"    exit_code=$?"}),
    t({"    handle_command_error \"${command[*]}\" \"${exit_code}\" \"${output}\""}),
    t({"    return \"${exit_code}\""}),
    t({"  fi"}),
    t({"}"}),
    i(0)
  }),

  -- File operations with validation
  s("file_ops", {
    t({"# Safe file operations with comprehensive validation"}),
    t({""}),
    t({"# Check if file exists and is readable"}),
    t({"validate_file_readable() {"}),
    t({"  local file=\"$1\""}),
    t({"  "}),
    t({"  if [[ ! -f \"${file}\" ]]; then"}),
    t({"    log_error \"File does not exist: ${file}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  if [[ ! -r \"${file}\" ]]; then"}),
    t({"    log_error \"File is not readable: ${file}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  log_debug \"File validated: ${file}\""}),
    t({"  return 0"}),
    t({"}"}),
    t({""}),
    t({"# Check if directory exists and is writable"}),
    t({"validate_dir_writable() {"}),
    t({"  local dir=\"$1\""}),
    t({"  "}),
    t({"  if [[ ! -d \"${dir}\" ]]; then"}),
    t({"    log_error \"Directory does not exist: ${dir}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  if [[ ! -w \"${dir}\" ]]; then"}),
    t({"    log_error \"Directory is not writable: ${dir}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  log_debug \"Directory validated: ${dir}\""}),
    t({"  return 0"}),
    t({"}"}),
    t({""}),
    t({"# Safely copy file with backup"}),
    t({"safe_copy() {"}),
    t({"  local source=\"$1\""}),
    t({"  local destination=\"$2\""}),
    t({"  local backup_suffix=\".backup.$(date +%Y%m%d_%H%M%S)\""}),
    t({"  "}),
    t({"  validate_file_readable \"${source}\" || return 1"}),
    t({"  validate_dir_writable \"$(dirname \"${destination}\")\" || return 1"}),
    t({"  "}),
    t({"  # Create backup if destination exists"}),
    t({"  if [[ -f \"${destination}\" ]]; then"}),
    t({"    local backup_file=\"${destination}${backup_suffix}\""}),
    t({"    log_info \"Creating backup: ${backup_file}\""}),
    t({"    cp \"${destination}\" \"${backup_file}\" || {"}),
    t({"      log_error \"Failed to create backup\""}),
    t({"      return 1"}),
    t({"    }"}),
    t({"  fi"}),
    t({"  "}),
    t({"  # Perform the copy"}),
    t({"  log_info \"Copying ${source} to ${destination}\""}),
    t({"  cp \"${source}\" \"${destination}\" || {"}),
    t({"    log_error \"Failed to copy file\""}),
    t({"    return 1"}),
    t({"  }"}),
    t({"  "}),
    t({"  log_info \"File copied successfully\""}),
    t({"  return 0"}),
    t({"}"}),
    i(0)
  }),

  -- Array operations
  s("arrays", {
    t({"# Array operations and manipulation"}),
    t({""}),
    t({"# Declare arrays (bash 4.0+)"}),
    t({"declare -a "}), i(1, "indexed_array"), t({"=(\"item1\" \"item2\" \"item3\")"}),
    t({"declare -A "}), i(2, "associative_array"), t({"=([\"key1\"]=\"value1\" [\"key2\"]=\"value2\")"}),
    t({""}),
    t({"# Array operations"}),
    t({"echo \"Array length: ${#"}), f(function(args) return args[1][1] end, {1}), t({"[@]}\""}),
    t({"echo \"All elements: ${"}), f(function(args) return args[1][1] end, {1}), t({"[*]}\""}),
    t({"echo \"All elements (proper): ${"}), f(function(args) return args[1][1] end, {1}), t({"[@]}\""}),
    t({"echo \"First element: ${"}), f(function(args) return args[1][1] end, {1}), t({"[0]}\""}),
    t({"echo \"Last element: ${"}), f(function(args) return args[1][1] end, {1}), t({"[-1]}\"  # bash 4.1+"}),
    t({""}),
    t({"# Safe iteration over array"}),
    t({"for item in \"${"}), f(function(args) return args[1][1] end, {1}), t({"[@]}\"; do"}),
    t({"  echo \"Processing: ${item}\""}),
    t({"done"}),
    t({""}),
    t({"# Iteration with index"}),
    t({"for i in \"${!"}), f(function(args) return args[1][1] end, {1}), t({"[@]}\"; do"}),
    t({"  echo \"Index ${i}: ${"}), f(function(args) return args[1][1] end, {1}), t({"[i]}\""}),
    t({"done"}),
    t({""}),
    t({"# Associative array iteration"}),
    t({"for key in \"${!"}), f(function(args) return args[1][1] end, {2}), t({"[@]}\"; do"}),
    t({"  echo \"${key}: ${"}), f(function(args) return args[1][1] end, {2}), t({"[${key}]}\""}),
    t({"done"}),
    t({""}),
    t({"# Array contains function"}),
    t({"array_contains() {"}),
    t({"  local item=\"$1\""}),
    t({"  shift"}),
    t({"  local array=(\"$@\")"}),
    t({"  "}),
    t({"  for element in \"${array[@]}\"; do"}),
    t({"    if [[ \"${element}\" == \"${item}\" ]]; then"}),
    t({"      return 0"}),
    t({"    fi"}),
    t({"  done"}),
    t({"  "}),
    t({"  return 1"}),
    t({"}"}),
    i(0)
  }),

  -- Control structures
  s("if_then", {
    t({"# Comprehensive conditional examples"}),
    t({""}),
    t({"# File/directory tests"}),
    t({"if [[ -f \"/path/to/file\" ]]; then"}),
    t({"  echo \"File exists\""}),
    t({"elif [[ -d \"/path/to/directory\" ]]; then"}),
    t({"  echo \"Directory exists\""}),
    t({"else"}),
    t({"  echo \"Neither file nor directory exists\""}),
    t({"fi"}),
    t({""}),
    t({"# String tests"}),
    t({"string1=\""}), i(1, "value1"), t({"\""}),
    t({"string2=\""}), i(2, "value2"), t({"\""}),
    t({""}),
    t({"if [[ -n \"${string1}\" && \"${string1}\" == \"${string2}\" ]]; then"}),
    t({"  echo \"Strings are equal and non-empty\""}),
    t({"elif [[ -z \"${string1}\" ]]; then"}),
    t({"  echo \"String1 is empty\""}),
    t({"elif [[ \"${string1}\" =~ ^[0-9]+$ ]]; then"}),
    t({"  echo \"String1 contains only digits\""}),
    t({"else"}),
    t({"  echo \"Strings are different\""}),
    t({"fi"}),
    t({""}),
    t({"# Numeric comparison"}),
    t({"num1="}), i(3, "10"),
    t({"num2="}), i(4, "20"),
    t({""}),
    t({"if [[ ${num1} -lt ${num2} ]]; then"}),
    t({"  echo \"${num1} is less than ${num2}\""}),
    t({"elif [[ ${num1} -eq ${num2} ]]; then"}),
    t({"  echo \"Numbers are equal\""}),
    t({"else"}),
    t({"  echo \"${num1} is greater than ${num2}\""}),
    t({"fi"}),
    i(0)
  }),

  -- Loop structures
  s("loops", {
    t({"# Various loop patterns"}),
    t({""}),
    t({"# Traditional for loop"}),
    t({"for ((i = "}), i(1, "0"), t({"; i < "}), i(2, "10"), t({"; i++)); do"}),
    t({"  echo \"Iteration ${i}\""}),
    t({"done"}),
    t({""}),
    t({"# For loop with range (bash 4.0+)"}),
    t({"for i in {"}), f(function(args) return args[1][1] end, {1}), t({".."}), f(function(args) return args[1][1] end, {2}), t({"}; do"}),
    t({"  echo \"Number: ${i}\""}),
    t({"done"}),
    t({""}),
    t({"# For loop with step"}),
    t({"for i in {0..20..2}; do  # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20"}),
    t({"  echo \"Even number: ${i}\""}),
    t({"done"}),
    t({""}),
    t({"# While loop with file reading"}),
    t({"while IFS= read -r line; do"}),
    t({"  echo \"Processing line: ${line}\""}),
    t({"done < \""}), i(3, "/path/to/file"), t({"\""}),
    t({""}),
    t({"# While loop with command"}),
    t({"counter=0"}),
    t({"while [[ ${counter} -lt 5 ]]; do"}),
    t({"  echo \"Counter: ${counter}\""}),
    t({"  ((counter++))"}),
    t({"done"}),
    t({""}),
    t({"# Until loop"}),
    t({"until [[ -f \""}), i(4, "/tmp/done.flag"), t({"\" ]]; do"}),
    t({"  echo \"Waiting for completion flag...\""}),
    t({"  sleep 1"}),
    t({"done"}),
    i(0)
  }),

  -- Case statement
  s("case", {
    t({"# Comprehensive case statement"}),
    t({"handle_action() {"}),
    t({"  local action=\"$1\""}),
    t({"  "}),
    t({"  case \"${action,,}\" in  # Convert to lowercase"}),
    t({"    start|begin|run)"}),
    t({"      log_info \"Starting the process\""}),
    t({"      "}), i(1, "# Add start logic here"),
    t({"      ;;"}),
    t({"    stop|end|halt)"}),
    t({"      log_info \"Stopping the process\""}),
    t({"      "}), i(2, "# Add stop logic here"),
    t({"      ;;"}),
    t({"    restart|reload)"}),
    t({"      log_info \"Restarting the process\""}),
    t({"      handle_action \"stop\""}),
    t({"      sleep 2"}),
    t({"      handle_action \"start\""}),
    t({"      ;;"}),
    t({"    status|info)"}),
    t({"      log_info \"Checking process status\""}),
    t({"      "}), i(3, "# Add status check logic here"),
    t({"      ;;"}),
    t({"    help|usage|-h|--help)"}),
    t({"      usage"}),
    t({"      ;;"}),
    t({"    \"\")"}),
    t({"      log_error \"No action specified\""}),
    t({"      return 1"}),
    t({"      ;;"}),
    t({"    *)"}),
    t({"      log_error \"Unknown action: ${action}\""}),
    t({"      log_info \"Valid actions: start, stop, restart, status, help\""}),
    t({"      return 1"}),
    t({"      ;;"}),
    t({"  esac"}),
    t({"}"}),
    i(0)
  }),

  -- Process management
  s("process", {
    t({"# Process management utilities"}),
    t({""}),
    t({"# Check if process is running by PID"}),
    t({"is_process_running() {"}),
    t({"  local pid=\"$1\""}),
    t({"  "}),
    t({"  if [[ -z \"${pid}\" || ! \"${pid}\" =~ ^[0-9]+$ ]]; then"}),
    t({"    log_error \"Invalid PID: ${pid}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"  "}),
    t({"  if kill -0 \"${pid}\" 2>/dev/null; then"}),
    t({"    return 0"}),
    t({"  else"}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"}"}),
    t({""}),
    t({"# Find process PID by name"}),
    t({"find_process_pid() {"}),
    t({"  local process_name=\"$1\""}),
    t({"  local pid"}),
    t({"  "}),
    t({"  pid=\"$(pgrep -f \"${process_name}\" | head -1)\""}),
    t({"  "}),
    t({"  if [[ -n \"${pid}\" ]]; then"}),
    t({"    echo \"${pid}\""}),
    t({"    return 0"}),
    t({"  else"}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"}"}),
    t({""}),
    t({"# Wait for process to finish with timeout"}),
    t({"wait_for_process() {"}),
    t({"  local pid=\"$1\""}),
    t({"  local timeout=\"${2:-30}\"  # Default 30 seconds"}),
    t({"  local elapsed=0"}),
    t({"  "}),
    t({"  log_info \"Waiting for process ${pid} to finish (timeout: ${timeout}s)\""}),
    t({"  "}),
    t({"  while is_process_running \"${pid}\"; do"}),
    t({"    if [[ ${elapsed} -ge ${timeout} ]]; then"}),
    t({"      log_error \"Timeout waiting for process ${pid}\""}),
    t({"      return 1"}),
    t({"    fi"}),
    t({"    "}),
    t({"    sleep 1"}),
    t({"    ((elapsed++))"}),
    t({"  done"}),
    t({"  "}),
    t({"  log_info \"Process ${pid} finished\""}),
    t({"  return 0"}),
    t({"}"}),
    t({""}),
    t({"# Gracefully stop process"}),
    t({"stop_process() {"}),
    t({"  local pid=\"$1\""}),
    t({"  local timeout=\"${2:-10}\""}),
    t({"  "}),
    t({"  if ! is_process_running \"${pid}\"; then"}),
    t({"    log_info \"Process ${pid} is not running\""}),
    t({"    return 0"}),
    t({"  fi"}),
    t({"  "}),
    t({"  log_info \"Sending TERM signal to process ${pid}\""}),
    t({"  kill -TERM \"${pid}\" 2>/dev/null || {"}),
    t({"    log_error \"Failed to send TERM signal to process ${pid}\""}),
    t({"    return 1"}),
    t({"  }"}),
    t({"  "}),
    t({"  # Wait for graceful shutdown"}),
    t({"  if wait_for_process \"${pid}\" \"${timeout}\"; then"}),
    t({"    return 0"}),
    t({"  fi"}),
    t({"  "}),
    t({"  # Force kill if still running"}),
    t({"  log_warn \"Process ${pid} didn't respond to TERM, sending KILL\""}),
    t({"  kill -KILL \"${pid}\" 2>/dev/null || {"}),
    t({"    log_error \"Failed to send KILL signal to process ${pid}\""}),
    t({"    return 1"}),
    t({"  }"}),
    t({"  "}),
    t({"  # Final check"}),
    t({"  if wait_for_process \"${pid}\" 5; then"}),
    t({"    log_info \"Process ${pid} stopped\""}),
    t({"    return 0"}),
    t({"  else"}),
    t({"    log_error \"Failed to stop process ${pid}\""}),
    t({"    return 1"}),
    t({"  fi"}),
    t({"}"}),
    i(0)
  }),

  -- Simple utility snippets
  s("shebang", {
    t({"#!/bin/bash"}),
    i(0)
  }),

  s("strict", {
    t({"set -euo pipefail"}),
    i(0)
  }),

  s("debug", {
    t({"set -x"}),
    i(0)
  }),

  s("readonly", {
    t({"readonly "}), i(1, "VARIABLE"), t({"=\""}), i(2, "value"), t({"\""}),
    i(0)
  }),

  s("local", {
    t({"local "}), i(1, "variable"), t({"=\""}), i(2, "value"), t({"\""}),
    i(0)
  }),
}